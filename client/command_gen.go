// Code generated by "rediser"; DO NOT EDIT.

package client

type Aggregate string

const (
	AggregateSum Aggregate = "SUM"
	AggregateMin Aggregate = "MIN"
	AggregateMax Aggregate = "MAX"
)

type Clienttype string

const (
	ClienttypeNormal  Clienttype = "normal"
	ClienttypeMaster  Clienttype = "master"
	ClienttypeReplica Clienttype = "replica"
	ClienttypePubsub  Clienttype = "pubsub"
)

type Mode string

const (
	ModeYes  Mode = "YES"
	ModeSync Mode = "SYNC"
	ModeNo   Mode = "NO"
)

type Overflow string

const (
	OverflowWrap Overflow = "WRAP"
	OverflowSat  Overflow = "SAT"
	OverflowFail Overflow = "FAIL"
)

type ReplyMode string

const (
	ReplyModeOn   ReplyMode = "ON"
	ReplyModeOff  ReplyMode = "OFF"
	ReplyModeSkip ReplyMode = "SKIP"
)

type Unit string

const (
	UnitM  Unit = "m"
	UnitKm Unit = "km"
	UnitFt Unit = "ft"
	UnitMi Unit = "mi"
)

type FieldValue struct {
	Field interface{}
	Value interface{}
}
type GroupConsumer struct {
	Group    string
	Consumer string
}
type KeyValue struct {
	Key   interface{}
	Value interface{}
}
type LongitudeLatitudeMember struct {
	Longitude float64
	Latitude  float64
	Member    interface{}
}
type OffsetCount struct {
	Offset int64
	Count  int64
}
type ScoreMember struct {
	Score  float64
	Member interface{}
}
type StartEnd struct {
	Start int64
	End   int64
}
type StartEndCount struct {
	Start string
	End   string
	Count int64
}
type TypeOffset struct {
	Type   string
	Offset int64
}
type TypeOffsetIncrement struct {
	Type      string
	Offset    int64
	Increment int64
}
type TypeOffsetValue struct {
	Type   string
	Offset int64
	Value  int64
}
type UsernamePassword struct {
	Username string
	Password string
}
type Commands interface {
	ClusterCommands
	ConnectionCommands
	GenericCommands
	GeoCommands
	HashCommands
	HyperloglogCommands
	ListCommands
	PubsubCommands
	ScriptingCommands
	ServerCommands
	SetCommands
	SortedSetCommands
	StreamCommands
	StringCommands
	TransactionsCommands
}
type ClusterCommands interface {
	ClusterAddslots(slot []int64) Result
	ClusterBumpepoch() Result
	ClusterCountFailureReports(nodeId string) Result
	ClusterCountkeysinslot(slot int64) Result
	ClusterDelslots(slot []int64) Result
	ClusterFailover(force *bool) Result
	ClusterFlushslots() Result
	ClusterForget(nodeId string) Result
	ClusterGetkeysinslot(slot, count int64) Result
	ClusterInfo() Result
	ClusterKeyslot(key string) Result
	ClusterMeet(ip string, port int64) Result
	ClusterMyid() Result
	ClusterNodes() Result
	ClusterReplicas(nodeId string) Result
	ClusterReplicate(nodeId string) Result
	ClusterReset(hard *bool) Result
	ClusterSaveconfig() Result
	ClusterSetConfigEpoch(configEpoch int64) Result
	ClusterSetslotImporting(slot int64, sourceNodeId string) Result
	ClusterSetslotMigrating(slot int64, destNodeId string) Result
	ClusterSetslotNode(slot int64, nodeId string) Result
	ClusterSetslotStable(slot int64) Result
	ClusterSlots() Result
	Readonly() Result
	Readwrite() Result
}
type ConnectionCommands interface {
	Auth(username *string, password string) Result
	ClientCaching(yes bool) Result
	ClientGetname() Result
	ClientGetredir() Result
	ClientId() Result
	ClientKill(id *int64, typ *Clienttype, addr *string, skipme bool) Result
	ClientList(typ *Clienttype) Result
	ClientPause(timeout int64) Result
	ClientReply(replyMode ReplyMode) Result
	ClientSetname(connectionName string) Result
	ClientTracking(on bool, redirect *int64, prefix []string, bcast, optin, optout, noloop bool) Result
	ClientUnblock(clientId int64, timeout *bool) Result
	Echo(message string) Result
	Hello(protover int64, auth *UsernamePassword, setname *string) Result
	Ping(message *string) Result
	Quit() Result
	Select(index int64) Result
}
type GenericCommands interface {
	Del(key []interface{}) Result
	Do(v ...interface{}) Result
	Dump(key interface{}) Result
	Exists(key []interface{}) Result
	Expire(key interface{}, seconds int64) Result
	Expireat(key interface{}, timestamp int64) Result
	Keys(pattern string) Result
	Migrate(host, port string, key interface{}, destinationDb, timeout int64, copy, replace bool, auth *string, keys []interface{}) Result
	Move(key interface{}, db int64) Result
	ObjectEncoding(key interface{}) Result
	ObjectFreq(key interface{}) Result
	ObjectHelp() Result
	ObjectIdletime(key interface{}) Result
	ObjectRefcount(key interface{}) Result
	PTTL(key interface{}) Result
	Persist(key interface{}) Result
	Pexpire(key interface{}, milliseconds int64) Result
	Pexpireat(key interface{}, millisecondsTimestamp int64) Result
	Randomkey() Result
	Rename(key, newkey interface{}) Result
	RenameNx(key, newkey interface{}) Result
	Restore(key interface{}, ttl int64, serializedValue string, replace, absttl bool, idletime, freq *int64) Result
	Scan(cursor int64, match *string, count *int64, typ *string) Result
	Sort(key interface{}, by *string, limit *OffsetCount, get []string, asc *bool, sorting bool, store *interface{}) Result
	TTL(key interface{}) Result
	Touch(key []interface{}) Result
	Type(key interface{}) Result
	Unlink(key []interface{}) Result
	Wait(numreplicas, timeout int64) Result
}
type GeoCommands interface {
	Geoadd(key interface{}, longitudeLatitudeMember []LongitudeLatitudeMember) Result
	Geodist(key, member1, member2 interface{}, unit *Unit) Result
	Geohash(key interface{}, member []interface{}) Result
	Geopos(key interface{}, member []interface{}) Result
	Georadius(key interface{}, longitude, latitude, radius float64, unit Unit, withcoord, withdist, withhash bool, count *int64, asc *bool, store, storedist *interface{}) Result
	Georadiusbymember(key, member interface{}, radius float64, unit Unit, withcoord, withdist, withhash bool, count *int64, asc *bool, store, storedist *interface{}) Result
}
type HashCommands interface {
	Hdel(key interface{}, field []interface{}) Result
	Hexists(key, field interface{}) Result
	Hget(key, field interface{}) Result
	Hgetall(key interface{}) Result
	Hincrby(key, field interface{}, increment int64) Result
	Hincrbyfloat(key, field interface{}, increment float64) Result
	Hkeys(key interface{}) Result
	Hlen(key interface{}) Result
	Hmget(key interface{}, field []interface{}) Result
	Hscan(key interface{}, cursor int64, match *string, count *int64) Result
	Hset(key interface{}, fieldValue []FieldValue) Result
	HsetNx(key, field, value interface{}) Result
	Hstrlen(key, field interface{}) Result
	Hvals(key interface{}) Result
}
type HyperloglogCommands interface {
	Pfadd(key interface{}, element []interface{}) Result
	Pfcount(key []interface{}) Result
	Pfmerge(destkey interface{}, sourcekey []interface{}) Result
}
type ListCommands interface {
	Blpop(key []interface{}, timeout int64) Result
	Brpop(key []interface{}, timeout int64) Result
	Brpoplpush(source, destination interface{}, timeout int64) Result
	Lindex(key interface{}, index int64) Result
	Linsert(key interface{}, before bool, pivot, element interface{}) Result
	Llen(key interface{}) Result
	Lpop(key interface{}) Result
	Lpos(key, element interface{}, rank, count, maxlen *int64) Result
	Lpush(key interface{}, element []interface{}) Result
	Lpushx(key interface{}, element []interface{}) Result
	Lrange(key interface{}, start, stop int64) Result
	Lrem(key interface{}, count int64, element interface{}) Result
	Lset(key interface{}, index int64, element interface{}) Result
	Ltrim(key interface{}, start, stop int64) Result
	Rpop(key interface{}) Result
	Rpoplpush(source, destination interface{}) Result
	Rpush(key interface{}, element []interface{}) Result
	Rpushx(key interface{}, element []interface{}) Result
}
type PubsubCommands interface {
	Psubscribe(pattern []string, cb MsgCallback) Result
	Publish(channel, message string) Result
	PubsubChannels(pattern *string) Result
	PubsubNumpat() Result
	PubsubNumsub(channel []string) Result
	Punsubscribe(pattern []string) Result
	Subscribe(channel []string, cb MsgCallback) Result
	Unsubscribe(channel []string) Result
}
type ScriptingCommands interface {
	Eval(script string, numkeys int64, key, arg []interface{}) Result
	Evalsha(sha1 string, numkeys int64, key, arg []interface{}) Result
	ScriptDebug(mode Mode) Result
	ScriptExists(sha1 []string) Result
	ScriptFlush() Result
	ScriptKill() Result
	ScriptLoad(script string) Result
}
type ServerCommands interface {
	AclCat(categoryname *string) Result
	AclDeluser(username []string) Result
	AclGenpass(bits *int64) Result
	AclGetuser(username string) Result
	AclHelp() Result
	AclList() Result
	AclLoad() Result
	AclLogCount(count *int64) Result
	AclLogReset() Result
	AclSave() Result
	AclSetuser(username string, rule []string) Result
	AclUsers() Result
	AclWhoami() Result
	Bgrewriteaof() Result
	Bgsave(schedule bool) Result
	Command() Result
	CommandCount() Result
	CommandGetkeys(arg []interface{}) Result
	CommandInfo(commandName []string) Result
	ConfigGet(parameter string) Result
	ConfigResetstat() Result
	ConfigRewrite() Result
	ConfigSet(parameter, value string) Result
	Dbsize() Result
	DebugObject(key interface{}) Result
	DebugSegfault() Result
	Flushall(async bool) Result
	Flushdb(async bool) Result
	Info(section *string) Result
	Lastsave() Result
	LatencyDoctor() Result
	LatencyGraph(event string) Result
	LatencyHelp() Result
	LatencyHistory(event string) Result
	LatencyLatest() Result
	LatencyReset(event []string) Result
	Lolwut(version *int64) Result
	MemoryDoctor() Result
	MemoryHelp() Result
	MemoryMallocStats() Result
	MemoryPurge() Result
	MemoryStats() Result
	MemoryUsage(key interface{}, samples *int64) Result
	ModuleList() Result
	ModuleLoad(path string, arg []string) Result
	ModuleUnload(name string) Result
	Monitor() Result
	Psync(replicationid, offset int64) Result
	Replicaof(host, port string) Result
	Role() Result
	Save() Result
	Shutdown(nosave *bool) Result
	SlowlogGet(count *int64) Result
	SlowlogLen() Result
	SlowlogReset() Result
	Swapdb(index1, index2 int64) Result
	Time() Result
}
type SetCommands interface {
	Sadd(key interface{}, member []interface{}) Result
	Scard(key interface{}) Result
	Sdiff(key []interface{}) Result
	Sdiffstore(destination interface{}, key []interface{}) Result
	Sinter(key []interface{}) Result
	Sinterstore(destination interface{}, key []interface{}) Result
	Sismember(key, member interface{}) Result
	Smembers(key interface{}) Result
	Smove(source, destination, member interface{}) Result
	Spop(key interface{}, count *int64) Result
	Srandmember(key interface{}, count *int64) Result
	Srem(key interface{}, member []interface{}) Result
	Sscan(key interface{}, cursor int64, match *string, count *int64) Result
	Sunion(key []interface{}) Result
	Sunionstore(destination interface{}, key []interface{}) Result
}
type SortedSetCommands interface {
	Bzpopmax(key []interface{}, timeout int64) Result
	Bzpopmin(key []interface{}, timeout int64) Result
	Zadd(key interface{}, scoreMember []ScoreMember) Result
	ZaddCh(key interface{}, scoreMember []ScoreMember) Result
	ZaddNx(key interface{}, scoreMember []ScoreMember) Result
	ZaddXx(key interface{}, scoreMember []ScoreMember) Result
	ZaddXxCh(key interface{}, scoreMember []ScoreMember) Result
	Zcard(key interface{}) Result
	Zcount(key interface{}, min, max Zfloat64) Result
	Zincrby(key interface{}, increment float64, member interface{}) Result
	Zinterstore(destination interface{}, numkeys int64, key []interface{}, weights []int64, aggregate *Aggregate) Result
	Zlexcount(key interface{}, min, max string) Result
	Zpopmax(key interface{}, count *int64) Result
	Zpopmin(key interface{}, count *int64) Result
	Zrange(key interface{}, start, stop int64, withscores bool) Result
	Zrangebylex(key interface{}, min, max string, limit *OffsetCount) Result
	Zrangebyscore(key interface{}, min, max Zfloat64, withscores bool, limit *OffsetCount) Result
	Zrank(key, member interface{}) Result
	Zrem(key interface{}, member []interface{}) Result
	Zremrangebylex(key interface{}, min, max string) Result
	Zremrangebyrank(key interface{}, start, stop int64) Result
	Zremrangebyscore(key interface{}, min, max Zfloat64) Result
	Zrevrange(key interface{}, start, stop int64, withscores bool) Result
	Zrevrangebylex(key interface{}, max, min string, limit *OffsetCount) Result
	Zrevrangebyscore(key interface{}, max, min Zfloat64, withscores bool, limit *OffsetCount) Result
	Zrevrank(key, member interface{}) Result
	Zscan(key interface{}, cursor int64, match *string, count *int64) Result
	Zscore(key, member interface{}) Result
	Zunionstore(destination interface{}, numkeys int64, key []interface{}, weights []int64, aggregate *Aggregate) Result
}
type StreamCommands interface {
	Xack(key interface{}, group string, id []string) Result
	Xadd(key interface{}, id string, fieldValue []FieldValue) Result
	Xclaim(key interface{}, group, consumer, minIdleTime string, id []string, idle, time, retrycount *int64, force, justid bool) Result
	Xdel(key interface{}, id []string) Result
	XgroupCreate(key interface{}, groupname, id string, mkstream bool) Result
	XgroupDelconsumer(key interface{}, groupname, consumername string) Result
	XgroupDestroy(key interface{}, groupname string) Result
	XgroupHelp() Result
	XgroupSetid(key interface{}, groupname, id string) Result
	XinfoConsumers(key interface{}, groupname string) Result
	XinfoGroups(key interface{}) Result
	XinfoHelp() Result
	XinfoStream(key interface{}) Result
	Xlen(key interface{}) Result
	Xpending(key interface{}, group string, startEndCount *StartEndCount, consumer *string) Result
	Xrange(key interface{}, start, end string, count *int64) Result
	Xread(count, block *int64, key []interface{}, id []string) Result
	Xreadgroup(group GroupConsumer, count, block *int64, noack bool, key []interface{}, id []string) Result
	Xrevrange(key interface{}, end, start string, count *int64) Result
	Xtrim(key interface{}, approx bool, count int64) Result
}
type StringCommands interface {
	Append(key, value interface{}) Result
	Bitcount(key interface{}, startEnd *StartEnd) Result
	Bitfield(key interface{}, operation []interface{}) Result
	BitopAnd(destkey interface{}, srckey []interface{}) Result
	BitopNot(destkey, srckey interface{}) Result
	BitopOr(destkey interface{}, srckey []interface{}) Result
	BitopXor(destkey interface{}, srckey []interface{}) Result
	Bitpos(key interface{}, bit int64, start, end *int64) Result
	Decr(key interface{}) Result
	Decrby(key interface{}, decrement int64) Result
	Get(key interface{}) Result
	Getbit(key interface{}, offset int64) Result
	Getrange(key interface{}, start, end int64) Result
	Getset(key, value interface{}) Result
	Incr(key interface{}) Result
	Incrby(key interface{}, increment int64) Result
	Incrbyfloat(key interface{}, increment float64) Result
	Mget(key []interface{}) Result
	Mset(keyValue []KeyValue) Result
	MsetNx(keyValue []KeyValue) Result
	Set(key, value interface{}) Result
	SetEx(key, value interface{}, seconds int64) Result
	SetExNx(key, value interface{}, seconds int64) Result
	SetExXx(key, value interface{}, seconds int64) Result
	SetNx(key, value interface{}) Result
	SetPx(key, value interface{}, milliseconds int64) Result
	SetPxNx(key, value interface{}, milliseconds int64) Result
	SetPxXx(key, value interface{}, milliseconds int64) Result
	SetXx(key, value interface{}) Result
	Setbit(key interface{}, offset, value int64) Result
	Setrange(key interface{}, offset int64, value interface{}) Result
	StralgoLcsIdxKeys(key1, key2 interface{}, withmatchlen bool, minmatchlen *int64) Result
	StralgoLcsIdxStrings(string1, string2 string, withmatchlen bool, minmatchlen *int64) Result
	StralgoLcsKeys(key1, key2 interface{}) Result
	StralgoLcsLenKeys(key1, key2 interface{}) Result
	StralgoLcsLenStrings(string1, string2 string) Result
	StralgoLcsStrings(string1, string2 string) Result
	Strlen(key interface{}) Result
}
type TransactionsCommands interface {
	Discard() Result
	Exec() Result
	Multi() Result
	Unwatch() Result
	Watch(key []interface{}) Result
}

// AclCat - List the ACL categories or the commands inside a category
// Group: server
// Since: 6.0.0
// Complexity: O(1) since the categories and commands are a fixed set.
func (c *command) AclCat(categoryname *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "CAT")
	if categoryname != nil {
		r.request.cmd = append(r.request.cmd, categoryname)
	}
	c.send(CmdAclCat, r)
	return r
}

// AclDeluser - Remove the specified ACL users and the associated rules
// Group: server
// Since: 6.0.0
// Complexity: O(1) amortized time considering the typical user.
func (c *command) AclDeluser(username []string) Result {
	r := newResult()
	if username == nil {
		r.setErr(newInvalidValueError("username", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ACL", "DELUSER")
	for _, v := range username {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdAclDeluser, r)
	return r
}

// AclGenpass - Generate a pseudorandom secure password to use for ACL users
// Group: server
// Since: 6.0.0
// Complexity: O(1)
func (c *command) AclGenpass(bits *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "GENPASS")
	if bits != nil {
		r.request.cmd = append(r.request.cmd, bits)
	}
	c.send(CmdAclGenpass, r)
	return r
}

// AclGetuser - Get the rules for a specific ACL user
// Group: server
// Since: 6.0.0
// Complexity:
// O(N). Where N is the number of password, command and pattern rules that the
// user has.
func (c *command) AclGetuser(username string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "GETUSER", username)
	c.send(CmdAclGetuser, r)
	return r
}

// AclHelp - Show helpful text about the different subcommands
// Group: server
// Since: 6.0.0
// Complexity: O(1)
func (c *command) AclHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "HELP")
	c.send(CmdAclHelp, r)
	return r
}

// AclList - List the current ACL rules in ACL config file format
// Group: server
// Since: 6.0.0
// Complexity: O(N). Where N is the number of configured users.
func (c *command) AclList() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "LIST")
	c.send(CmdAclList, r)
	return r
}

// AclLoad - Reload the ACLs from the configured ACL file
// Group: server
// Since: 6.0.0
// Complexity: O(N). Where N is the number of configured users.
func (c *command) AclLoad() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "LOAD")
	c.send(CmdAclLoad, r)
	return r
}

// AclLogCount - List latest events denied because of ACLs in place
// Group: server
// Since: 6.0.0
// Complexity: O(N) with N being the number of entries shown.
func (c *command) AclLogCount(count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "LOG")
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdAclLogCount, r)
	return r
}

// AclLogReset - List latest events denied because of ACLs in place
// Group: server
// Since: 6.0.0
// Complexity: O(N) with N being the number of entries shown.
func (c *command) AclLogReset() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "LOG", "RESET")
	c.send(CmdAclLogReset, r)
	return r
}

// AclSave - Save the current ACL rules in the configured ACL file
// Group: server
// Since: 6.0.0
// Complexity: O(N). Where N is the number of configured users.
func (c *command) AclSave() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "SAVE")
	c.send(CmdAclSave, r)
	return r
}

// AclSetuser - Modify or create the rules for a specific ACL user
// Group: server
// Since: 6.0.0
// Complexity: O(N). Where N is the number of rules provided.
func (c *command) AclSetuser(username string, rule []string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "SETUSER", username)
	for _, v := range rule {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdAclSetuser, r)
	return r
}

// AclUsers - List the username of all the configured ACL rules
// Group: server
// Since: 6.0.0
// Complexity: O(N). Where N is the number of configured users.
func (c *command) AclUsers() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "USERS")
	c.send(CmdAclUsers, r)
	return r
}

// AclWhoami - Return the name of the user associated to the current connection
// Group: server
// Since: 6.0.0
// Complexity: O(1)
func (c *command) AclWhoami() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ACL", "WHOAMI")
	c.send(CmdAclWhoami, r)
	return r
}

// Append - Append a value to a key
// Group: string
// Since: 2.0.0
// Complexity:
// O(1). The amortized time complexity is O(1) assuming the appended value is
// small and the already present value is of any size, since the dynamic string library
// used by Redis will double the free space available on every reallocation.
func (c *command) Append(key, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "APPEND", key, value)
	c.send(CmdAppend, r)
	return r
}

// Auth - Authenticate to the server
// Group: connection
// Since: 1.0.0
func (c *command) Auth(username *string, password string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "AUTH")
	if username != nil {
		r.request.cmd = append(r.request.cmd, username)
	}
	r.request.cmd = append(r.request.cmd, password)
	c.send(CmdAuth, r)
	return r
}

// Bgrewriteaof - Asynchronously rewrite the append-only file
// Group: server
// Since: 1.0.0
func (c *command) Bgrewriteaof() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BGREWRITEAOF")
	c.send(CmdBgrewriteaof, r)
	return r
}

// Bgsave - Asynchronously save the dataset to disk
// Group: server
// Since: 1.0.0
func (c *command) Bgsave(schedule bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BGSAVE")
	if schedule {
		r.request.cmd = append(r.request.cmd, "SCHEDULE")
	}
	c.send(CmdBgsave, r)
	return r
}

// Bitcount - Count set bits in a string
// Group: string
// Since: 2.6.0
// Complexity: O(N)
func (c *command) Bitcount(key interface{}, startEnd *StartEnd) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BITCOUNT", key)
	if startEnd != nil {
		r.request.cmd = append(r.request.cmd, startEnd.Start, startEnd.End)
	}
	c.send(CmdBitcount, r)
	return r
}

// Bitfield - Perform arbitrary bitfield integer operations on strings
// Group: string
// Since: 3.2.0
// Complexity: O(1) for each subcommand specified
func (c *command) Bitfield(key interface{}, operation []interface{}) Result {
	r := newResult()
	if operation == nil {
		r.setErr(newInvalidValueError("operation", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BITFIELD", key)
	for _, v := range operation {
		switch v := v.(type) {
		case TypeOffset:
			r.request.cmd = append(r.request.cmd, "GET", v.Type, v.Offset)
		case TypeOffsetValue:
			r.request.cmd = append(r.request.cmd, "SET", v.Type, v.Offset, v.Value)
		case TypeOffsetIncrement:
			r.request.cmd = append(r.request.cmd, "INCRBY", v.Type, v.Offset, v.Increment)
		case Overflow:
			r.request.cmd = append(r.request.cmd, "OVERFLOW", v)
		case *TypeOffset:
			r.request.cmd = append(r.request.cmd, "GET", v.Type, v.Offset)
		case *TypeOffsetValue:
			r.request.cmd = append(r.request.cmd, "SET", v.Type, v.Offset, v.Value)
		case *TypeOffsetIncrement:
			r.request.cmd = append(r.request.cmd, "INCRBY", v.Type, v.Offset, v.Increment)
		case *Overflow:
			r.request.cmd = append(r.request.cmd, "OVERFLOW", v)
		default:
			r.setErr(newInvalidValueError("operation", v))
			return r
		}
	}
	c.send(CmdBitfield, r)
	return r
}

// BitopAnd - Perform bitwise operations between strings
// Group: string
// Since: 2.6.0
// Complexity: O(N)
func (c *command) BitopAnd(destkey interface{}, srckey []interface{}) Result {
	r := newResult()
	if srckey == nil {
		r.setErr(newInvalidValueError("srckey", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BITOP", "AND", destkey)
	for _, v := range srckey {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdBitopAnd, r)
	return r
}

// BitopNot - Perform bitwise operations between strings
// Group: string
// Since: 2.6.0
// Complexity: O(N)
func (c *command) BitopNot(destkey, srckey interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BITOP", "NOT", destkey, srckey)
	c.send(CmdBitopNot, r)
	return r
}

// BitopOr - Perform bitwise operations between strings
// Group: string
// Since: 2.6.0
// Complexity: O(N)
func (c *command) BitopOr(destkey interface{}, srckey []interface{}) Result {
	r := newResult()
	if srckey == nil {
		r.setErr(newInvalidValueError("srckey", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BITOP", "OR", destkey)
	for _, v := range srckey {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdBitopOr, r)
	return r
}

// BitopXor - Perform bitwise operations between strings
// Group: string
// Since: 2.6.0
// Complexity: O(N)
func (c *command) BitopXor(destkey interface{}, srckey []interface{}) Result {
	r := newResult()
	if srckey == nil {
		r.setErr(newInvalidValueError("srckey", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BITOP", "XOR", destkey)
	for _, v := range srckey {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdBitopXor, r)
	return r
}

// Bitpos - Find first bit set or clear in a string
// Group: string
// Since: 2.8.7
// Complexity: O(N)
func (c *command) Bitpos(key interface{}, bit int64, start, end *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BITPOS", key, bit)
	if start != nil {
		r.request.cmd = append(r.request.cmd, start)
	}
	if end != nil {
		r.request.cmd = append(r.request.cmd, end)
	}
	c.send(CmdBitpos, r)
	return r
}

// Blpop - Remove and get the first element in a list, or block until one is available
// Group: list
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Blpop(key []interface{}, timeout int64) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BLPOP")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cmd = append(r.request.cmd, timeout)
	c.send(CmdBlpop, r)
	return r
}

// Brpop - Remove and get the last element in a list, or block until one is available
// Group: list
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Brpop(key []interface{}, timeout int64) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BRPOP")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cmd = append(r.request.cmd, timeout)
	c.send(CmdBrpop, r)
	return r
}

// Brpoplpush - Pop an element from a list, push it to another list and return it; or block until one is available
// Group: list
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Brpoplpush(source, destination interface{}, timeout int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "BRPOPLPUSH", source, destination, timeout)
	c.send(CmdBrpoplpush, r)
	return r
}

// Bzpopmax - Remove and return the member with the highest score from one or more sorted sets, or block until one is available
// Group: sorted_set
// Since: 5.0.0
// Complexity: O(log(N)) with N being the number of elements in the sorted set.
func (c *command) Bzpopmax(key []interface{}, timeout int64) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BZPOPMAX")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cmd = append(r.request.cmd, timeout)
	c.send(CmdBzpopmax, r)
	return r
}

// Bzpopmin - Remove and return the member with the lowest score from one or more sorted sets, or block until one is available
// Group: sorted_set
// Since: 5.0.0
// Complexity: O(log(N)) with N being the number of elements in the sorted set.
func (c *command) Bzpopmin(key []interface{}, timeout int64) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "BZPOPMIN")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cmd = append(r.request.cmd, timeout)
	c.send(CmdBzpopmin, r)
	return r
}

// ClientCaching - Instruct the server about tracking or not keys in the next request
// Group: connection
// Since: 6.0.0
// Complexity: O(1)
func (c *command) ClientCaching(yes bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "CACHING")
	if yes {
		r.request.cmd = append(r.request.cmd, "YES")
	} else {
		r.request.cmd = append(r.request.cmd, "NO")
	}
	c.send(CmdClientCaching, r)
	return r
}

// ClientGetname - Get the current connection name
// Group: connection
// Since: 2.6.9
// Complexity: O(1)
func (c *command) ClientGetname() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "GETNAME")
	c.send(CmdClientGetname, r)
	return r
}

// ClientGetredir - Get tracking notifications redirection client ID if any
// Group: connection
// Since: 6.0.0
// Complexity: O(1)
func (c *command) ClientGetredir() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "GETREDIR")
	c.send(CmdClientGetredir, r)
	return r
}

// ClientId - Returns the client ID for the current connection
// Group: connection
// Since: 5.0.0
// Complexity: O(1)
func (c *command) ClientId() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "ID")
	c.send(CmdClientId, r)
	return r
}

// ClientKill - Kill the connection of a client
// Group: connection
// Since: 2.4.0
// Complexity: O(N) where N is the number of client connections
func (c *command) ClientKill(id *int64, typ *Clienttype, addr *string, skipme bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "KILL")
	if id != nil {
		r.request.cmd = append(r.request.cmd, "ID", id)
	}
	if typ != nil {
		r.request.cmd = append(r.request.cmd, "TYPE", typ)
	}
	if addr != nil {
		r.request.cmd = append(r.request.cmd, "ADDR", addr)
	}
	if skipme {
		r.request.cmd = append(r.request.cmd, "SKIPME", "YES")
	} else {
		r.request.cmd = append(r.request.cmd, "SKIPME", "NO")
	}
	c.send(CmdClientKill, r)
	return r
}

// ClientList - Get the list of client connections
// Group: connection
// Since: 2.4.0
// Complexity: O(N) where N is the number of client connections
func (c *command) ClientList(typ *Clienttype) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "LIST")
	if typ != nil {
		r.request.cmd = append(r.request.cmd, "TYPE", typ)
	}
	c.send(CmdClientList, r)
	return r
}

// ClientPause - Stop processing commands from clients for some time
// Group: connection
// Since: 2.9.50
// Complexity: O(1)
func (c *command) ClientPause(timeout int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "PAUSE", timeout)
	c.send(CmdClientPause, r)
	return r
}

// ClientReply - Instruct the server whether to reply to commands
// Group: connection
// Since: 3.2.0
// Complexity: O(1)
func (c *command) ClientReply(replyMode ReplyMode) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "REPLY", replyMode)
	c.send(CmdClientReply, r)
	return r
}

// ClientSetname - Set the current connection name
// Group: connection
// Since: 2.6.9
// Complexity: O(1)
func (c *command) ClientSetname(connectionName string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "SETNAME", connectionName)
	c.send(CmdClientSetname, r)
	return r
}

// ClientTracking - Enable or disable server assisted client side caching support
// Group: connection
// Since: 6.0.0
// Complexity: O(1)
func (c *command) ClientTracking(on bool, redirect *int64, prefix []string, bcast, optin, optout, noloop bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "TRACKING")
	if on {
		r.request.cmd = append(r.request.cmd, "ON")
	} else {
		r.request.cmd = append(r.request.cmd, "OFF")
	}
	if redirect != nil {
		r.request.cmd = append(r.request.cmd, "REDIRECT", redirect)
	}
	if prefix != nil {
		for _, v := range prefix {
			r.request.cmd = append(r.request.cmd, "PREFIX")
			r.request.cmd = append(r.request.cmd, v)
		}
	}
	if bcast {
		r.request.cmd = append(r.request.cmd, "BCAST")
	}
	if optin {
		r.request.cmd = append(r.request.cmd, "OPTIN")
	}
	if optout {
		r.request.cmd = append(r.request.cmd, "OPTOUT")
	}
	if noloop {
		r.request.cmd = append(r.request.cmd, "NOLOOP")
	}
	c.send(CmdClientTracking, r)
	return r
}

// ClientUnblock - Unblock a client blocked in a blocking command from a different connection
// Group: connection
// Since: 5.0.0
// Complexity: O(log N) where N is the number of client connections
func (c *command) ClientUnblock(clientId int64, timeout *bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLIENT", "UNBLOCK", clientId)
	if timeout != nil {
		if *timeout {
			r.request.cmd = append(r.request.cmd, "TIMEOUT")
		} else {
			r.request.cmd = append(r.request.cmd, "ERROR")
		}
	}
	c.send(CmdClientUnblock, r)
	return r
}

// ClusterAddslots - Assign new hash slots to receiving node
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the total number of hash slot arguments
func (c *command) ClusterAddslots(slot []int64) Result {
	r := newResult()
	if slot == nil {
		r.setErr(newInvalidValueError("slot", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "CLUSTER", "ADDSLOTS")
	for _, v := range slot {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdClusterAddslots, r)
	return r
}

// ClusterBumpepoch - Advance the cluster config epoch
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterBumpepoch() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "BUMPEPOCH")
	c.send(CmdClusterBumpepoch, r)
	return r
}

// ClusterCountFailureReports - Return the number of failure reports active for a given node
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the number of failure reports
func (c *command) ClusterCountFailureReports(nodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "COUNT-FAILURE-REPORTS", nodeId)
	c.send(CmdClusterCountFailureReports, r)
	return r
}

// ClusterCountkeysinslot - Return the number of local keys in the specified hash slot
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterCountkeysinslot(slot int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "COUNTKEYSINSLOT", slot)
	c.send(CmdClusterCountkeysinslot, r)
	return r
}

// ClusterDelslots - Set hash slots as unbound in receiving node
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the total number of hash slot arguments
func (c *command) ClusterDelslots(slot []int64) Result {
	r := newResult()
	if slot == nil {
		r.setErr(newInvalidValueError("slot", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "CLUSTER", "DELSLOTS")
	for _, v := range slot {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdClusterDelslots, r)
	return r
}

// ClusterFailover - Forces a replica to perform a manual failover of its master.
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterFailover(force *bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "FAILOVER")
	if force != nil {
		if *force {
			r.request.cmd = append(r.request.cmd, "FORCE")
		} else {
			r.request.cmd = append(r.request.cmd, "TAKEOVER")
		}
	}
	c.send(CmdClusterFailover, r)
	return r
}

// ClusterFlushslots - Delete a node's own slots information
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterFlushslots() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "FLUSHSLOTS")
	c.send(CmdClusterFlushslots, r)
	return r
}

// ClusterForget - Remove a node from the nodes table
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterForget(nodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "FORGET", nodeId)
	c.send(CmdClusterForget, r)
	return r
}

// ClusterGetkeysinslot - Return local key names in the specified hash slot
// Group: cluster
// Since: 3.0.0
// Complexity: O(log(N)) where N is the number of requested keys
func (c *command) ClusterGetkeysinslot(slot, count int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "GETKEYSINSLOT", slot, count)
	c.send(CmdClusterGetkeysinslot, r)
	return r
}

// ClusterInfo - Provides info about Redis Cluster node state
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterInfo() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "INFO")
	c.send(CmdClusterInfo, r)
	return r
}

// ClusterKeyslot - Returns the hash slot of the specified key
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the number of bytes in the key
func (c *command) ClusterKeyslot(key string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "KEYSLOT", key)
	c.send(CmdClusterKeyslot, r)
	return r
}

// ClusterMeet - Force a node cluster to handshake with another node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterMeet(ip string, port int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "MEET", ip, port)
	c.send(CmdClusterMeet, r)
	return r
}

// ClusterMyid - Return the node id
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterMyid() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "MYID")
	c.send(CmdClusterMyid, r)
	return r
}

// ClusterNodes - Get Cluster config for the node
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the total number of Cluster nodes
func (c *command) ClusterNodes() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "NODES")
	c.send(CmdClusterNodes, r)
	return r
}

// ClusterReplicas - List replica nodes of the specified master node
// Group: cluster
// Since: 5.0.0
// Complexity: O(1)
func (c *command) ClusterReplicas(nodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "REPLICAS", nodeId)
	c.send(CmdClusterReplicas, r)
	return r
}

// ClusterReplicate - Reconfigure a node as a replica of the specified master node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterReplicate(nodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "REPLICATE", nodeId)
	c.send(CmdClusterReplicate, r)
	return r
}

// ClusterReset - Reset a Redis Cluster node
// Group: cluster
// Since: 3.0.0
// Complexity:
// O(N) where N is the number of known nodes. The command may execute a FLUSHALL
// as a side effect.
func (c *command) ClusterReset(hard *bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "RESET")
	if hard != nil {
		if *hard {
			r.request.cmd = append(r.request.cmd, "HARD")
		} else {
			r.request.cmd = append(r.request.cmd, "SOFT")
		}
	}
	c.send(CmdClusterReset, r)
	return r
}

// ClusterSaveconfig - Forces the node to save cluster state on disk
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSaveconfig() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SAVECONFIG")
	c.send(CmdClusterSaveconfig, r)
	return r
}

// ClusterSetConfigEpoch - Set the configuration epoch in a new node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSetConfigEpoch(configEpoch int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SET-CONFIG-EPOCH", configEpoch)
	c.send(CmdClusterSetConfigEpoch, r)
	return r
}

// ClusterSetslotImporting - Bind a hash slot to a specific node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSetslotImporting(slot int64, sourceNodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SETSLOT", slot, "IMPORTING", sourceNodeId)
	c.send(CmdClusterSetslotImporting, r)
	return r
}

// ClusterSetslotMigrating - Bind a hash slot to a specific node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSetslotMigrating(slot int64, destNodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SETSLOT", slot, "MIGRATING", destNodeId)
	c.send(CmdClusterSetslotMigrating, r)
	return r
}

// ClusterSetslotNode - Bind a hash slot to a specific node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSetslotNode(slot int64, nodeId string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SETSLOT", slot, "NODE", nodeId)
	c.send(CmdClusterSetslotNode, r)
	return r
}

// ClusterSetslotStable - Bind a hash slot to a specific node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) ClusterSetslotStable(slot int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SETSLOT", slot, "STABLE")
	c.send(CmdClusterSetslotStable, r)
	return r
}

// ClusterSlots - Get array of Cluster slot to node mappings
// Group: cluster
// Since: 3.0.0
// Complexity: O(N) where N is the total number of Cluster nodes
func (c *command) ClusterSlots() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CLUSTER", "SLOTS")
	c.send(CmdClusterSlots, r)
	return r
}

// Command - Get array of Redis command details
// Group: server
// Since: 2.8.13
// Complexity: O(N) where N is the total number of Redis commands
func (c *command) Command() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "COMMAND")
	c.send(CmdCommand, r)
	return r
}

// CommandCount - Get total number of Redis commands
// Group: server
// Since: 2.8.13
// Complexity: O(1)
func (c *command) CommandCount() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "COMMAND", "COUNT")
	c.send(CmdCommandCount, r)
	return r
}

// CommandGetkeys - Extract keys given a full Redis command
// Group: server
// Since: 2.8.13
// Complexity: O(N) where N is the number of arguments to the command
func (c *command) CommandGetkeys(arg []interface{}) Result {
	r := newResult()
	if arg == nil {
		r.setErr(newInvalidValueError("arg", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "COMMAND", "GETKEYS")
	for _, v := range arg {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdCommandGetkeys, r)
	return r
}

// CommandInfo - Get array of specific Redis command details
// Group: server
// Since: 2.8.13
// Complexity: O(N) when N is number of commands to look up
func (c *command) CommandInfo(commandName []string) Result {
	r := newResult()
	if commandName == nil {
		r.setErr(newInvalidValueError("commandName", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "COMMAND", "INFO")
	for _, v := range commandName {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdCommandInfo, r)
	return r
}

// ConfigGet - Get the value of a configuration parameter
// Group: server
// Since: 2.0.0
func (c *command) ConfigGet(parameter string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CONFIG", "GET", parameter)
	c.send(CmdConfigGet, r)
	return r
}

// ConfigResetstat - Reset the stats returned by INFO
// Group: server
// Since: 2.0.0
// Complexity: O(1)
func (c *command) ConfigResetstat() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CONFIG", "RESETSTAT")
	c.send(CmdConfigResetstat, r)
	return r
}

// ConfigRewrite - Rewrite the configuration file with the in memory configuration
// Group: server
// Since: 2.8.0
func (c *command) ConfigRewrite() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CONFIG", "REWRITE")
	c.send(CmdConfigRewrite, r)
	return r
}

// ConfigSet - Set a configuration parameter to the given value
// Group: server
// Since: 2.0.0
func (c *command) ConfigSet(parameter, value string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "CONFIG", "SET", parameter, value)
	c.send(CmdConfigSet, r)
	return r
}

// Dbsize - Return the number of keys in the selected database
// Group: server
// Since: 1.0.0
func (c *command) Dbsize() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DBSIZE")
	c.send(CmdDbsize, r)
	return r
}

// DebugObject - Get debugging information about a key
// Group: server
// Since: 1.0.0
func (c *command) DebugObject(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DEBUG", "OBJECT", key)
	c.send(CmdDebugObject, r)
	return r
}

// DebugSegfault - Make the server crash
// Group: server
// Since: 1.0.0
func (c *command) DebugSegfault() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DEBUG", "SEGFAULT")
	c.send(CmdDebugSegfault, r)
	return r
}

// Decr - Decrement the integer value of a key by one
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Decr(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DECR", key)
	c.send(CmdDecr, r)
	return r
}

// Decrby - Decrement the integer value of a key by the given number
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Decrby(key interface{}, decrement int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DECRBY", key, decrement)
	c.send(CmdDecrby, r)
	return r
}

// Del - Delete a key
// Group: generic
// Since: 1.0.0
// Complexity:
// O(N) where N is the number of keys that will be removed. When a key to remove
// holds a value other than a string, the individual complexity for this key is O(M)
// where M is the number of elements in the list, set, sorted set or hash. Removing a
// single key that holds a string value is O(1).
func (c *command) Del(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "DEL")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdDel, r)
	return r
}

// Discard - Discard all commands issued after MULTI
// Group: transactions
// Since: 2.0.0
func (c *command) Discard() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DISCARD")
	c.send(CmdDiscard, r)
	return r
}

// Do - Generic command.
// Group: generic
// Since: -
func (c *command) Do(v ...interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, v...)
	c.send(CmdDo, r)
	return r
}

// Dump - Return a serialized version of the value stored at the specified key.
// Group: generic
// Since: 2.6.0
// Complexity:
// O(1) to access the key and additional O(N*M) to serialized it, where N is the
// number of Redis objects composing the value and M their average size. For small string
// values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).
func (c *command) Dump(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "DUMP", key)
	c.send(CmdDump, r)
	return r
}

// Echo - Echo the given string
// Group: connection
// Since: 1.0.0
func (c *command) Echo(message string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ECHO", message)
	c.send(CmdEcho, r)
	return r
}

// Eval - Execute a Lua script server side
// Group: scripting
// Since: 2.6.0
// Complexity: Depends on the script that is executed.
func (c *command) Eval(script string, numkeys int64, key, arg []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	if arg == nil {
		r.setErr(newInvalidValueError("arg", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "EVAL", script, numkeys)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	for _, v := range arg {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdEval, r)
	return r
}

// Evalsha - Execute a Lua script server side
// Group: scripting
// Since: 2.6.0
// Complexity: Depends on the script that is executed.
func (c *command) Evalsha(sha1 string, numkeys int64, key, arg []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	if arg == nil {
		r.setErr(newInvalidValueError("arg", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "EVALSHA", sha1, numkeys)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	for _, v := range arg {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdEvalsha, r)
	return r
}

// Exec - Execute all commands issued after MULTI
// Group: transactions
// Since: 1.2.0
func (c *command) Exec() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "EXEC")
	c.send(CmdExec, r)
	return r
}

// Exists - Determine if a key exists
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Exists(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "EXISTS")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdExists, r)
	return r
}

// Expire - Set a key's time to live in seconds
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Expire(key interface{}, seconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "EXPIRE", key, seconds)
	c.send(CmdExpire, r)
	return r
}

// Expireat - Set the expiration for a key as a UNIX timestamp
// Group: generic
// Since: 1.2.0
// Complexity: O(1)
func (c *command) Expireat(key interface{}, timestamp int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "EXPIREAT", key, timestamp)
	c.send(CmdExpireat, r)
	return r
}

// Flushall - Remove all keys from all databases
// Group: server
// Since: 1.0.0
func (c *command) Flushall(async bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "FLUSHALL")
	if async {
		r.request.cmd = append(r.request.cmd, "ASYNC")
	}
	c.send(CmdFlushall, r)
	return r
}

// Flushdb - Remove all keys from the current database
// Group: server
// Since: 1.0.0
func (c *command) Flushdb(async bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "FLUSHDB")
	if async {
		r.request.cmd = append(r.request.cmd, "ASYNC")
	}
	c.send(CmdFlushdb, r)
	return r
}

// Geoadd - Add one or more geospatial items in the geospatial index represented using a sorted set
// Group: geo
// Since: 3.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) Geoadd(key interface{}, longitudeLatitudeMember []LongitudeLatitudeMember) Result {
	r := newResult()
	if longitudeLatitudeMember == nil {
		r.setErr(newInvalidValueError("longitudeLatitudeMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "GEOADD", key)
	for _, v := range longitudeLatitudeMember {
		r.request.cmd = append(r.request.cmd, v.Longitude, v.Latitude, v.Member)
	}
	c.send(CmdGeoadd, r)
	return r
}

// Geodist - Returns the distance between two members of a geospatial index
// Group: geo
// Since: 3.2.0
// Complexity: O(log(N))
func (c *command) Geodist(key, member1, member2 interface{}, unit *Unit) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GEODIST", key, member1, member2)
	if unit != nil {
		r.request.cmd = append(r.request.cmd, unit)
	}
	c.send(CmdGeodist, r)
	return r
}

// Geohash - Returns members of a geospatial index as standard geohash strings
// Group: geo
// Since: 3.2.0
// Complexity:
// O(log(N)) for each member requested, where N is the number of elements in the
// sorted set.
func (c *command) Geohash(key interface{}, member []interface{}) Result {
	r := newResult()
	if member == nil {
		r.setErr(newInvalidValueError("member", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "GEOHASH", key)
	for _, v := range member {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdGeohash, r)
	return r
}

// Geopos - Returns longitude and latitude of members of a geospatial index
// Group: geo
// Since: 3.2.0
// Complexity:
// O(log(N)) for each member requested, where N is the number of elements in the
// sorted set.
func (c *command) Geopos(key interface{}, member []interface{}) Result {
	r := newResult()
	if member == nil {
		r.setErr(newInvalidValueError("member", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "GEOPOS", key)
	for _, v := range member {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdGeopos, r)
	return r
}

// Georadius - Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point
// Group: geo
// Since: 3.2.0
// Complexity:
// O(N+log(M)) where N is the number of elements inside the bounding box of the
// circular area delimited by center and radius and M is the number of items inside the
// index.
func (c *command) Georadius(key interface{}, longitude, latitude, radius float64, unit Unit, withcoord, withdist, withhash bool, count *int64, asc *bool, store, storedist *interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GEORADIUS", key, longitude, latitude, radius, unit)
	if withcoord {
		r.request.cmd = append(r.request.cmd, "WITHCOORD")
	}
	if withdist {
		r.request.cmd = append(r.request.cmd, "WITHDIST")
	}
	if withhash {
		r.request.cmd = append(r.request.cmd, "WITHHASH")
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if asc != nil {
		if *asc {
			r.request.cmd = append(r.request.cmd, "ASC")
		} else {
			r.request.cmd = append(r.request.cmd, "DESC")
		}
	}
	if store != nil {
		r.request.cmd = append(r.request.cmd, "STORE", store)
	}
	if storedist != nil {
		r.request.cmd = append(r.request.cmd, "STOREDIST", storedist)
	}
	c.send(CmdGeoradius, r)
	return r
}

// Georadiusbymember - Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member
// Group: geo
// Since: 3.2.0
// Complexity:
// O(N+log(M)) where N is the number of elements inside the bounding box of the
// circular area delimited by center and radius and M is the number of items inside the
// index.
func (c *command) Georadiusbymember(key, member interface{}, radius float64, unit Unit, withcoord, withdist, withhash bool, count *int64, asc *bool, store, storedist *interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GEORADIUSBYMEMBER", key, member, radius, unit)
	if withcoord {
		r.request.cmd = append(r.request.cmd, "WITHCOORD")
	}
	if withdist {
		r.request.cmd = append(r.request.cmd, "WITHDIST")
	}
	if withhash {
		r.request.cmd = append(r.request.cmd, "WITHHASH")
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if asc != nil {
		if *asc {
			r.request.cmd = append(r.request.cmd, "ASC")
		} else {
			r.request.cmd = append(r.request.cmd, "DESC")
		}
	}
	if store != nil {
		r.request.cmd = append(r.request.cmd, "STORE", store)
	}
	if storedist != nil {
		r.request.cmd = append(r.request.cmd, "STOREDIST", storedist)
	}
	c.send(CmdGeoradiusbymember, r)
	return r
}

// Get - Get the value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Get(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GET", key)
	c.send(CmdGet, r)
	return r
}

// Getbit - Returns the bit value at offset in the string value stored at key
// Group: string
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Getbit(key interface{}, offset int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GETBIT", key, offset)
	c.send(CmdGetbit, r)
	return r
}

// Getrange - Get a substring of the string stored at a key
// Group: string
// Since: 2.4.0
// Complexity:
// O(N) where N is the length of the returned string. The complexity is ultimately
// determined by the returned length, but because creating a substring from an existing
// string is very cheap, it can be considered O(1) for small strings.
func (c *command) Getrange(key interface{}, start, end int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GETRANGE", key, start, end)
	c.send(CmdGetrange, r)
	return r
}

// Getset - Set the string value of a key and return its old value
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Getset(key, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "GETSET", key, value)
	c.send(CmdGetset, r)
	return r
}

// Hdel - Delete one or more hash fields
// Group: hash
// Since: 2.0.0
// Complexity: O(N) where N is the number of fields to be removed.
func (c *command) Hdel(key interface{}, field []interface{}) Result {
	r := newResult()
	if field == nil {
		r.setErr(newInvalidValueError("field", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "HDEL", key)
	for _, v := range field {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdHdel, r)
	return r
}

// Hello - switch Redis protocol
// Group: connection
// Since: 6.0.0
// Complexity: O(1)
func (c *command) Hello(protover int64, auth *UsernamePassword, setname *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HELLO", protover)
	if auth != nil {
		r.request.cmd = append(r.request.cmd, "AUTH", auth.Username, auth.Password)
	}
	if setname != nil {
		r.request.cmd = append(r.request.cmd, "SETNAME", setname)
	}
	c.send(CmdHello, r)
	return r
}

// Hexists - Determine if a hash field exists
// Group: hash
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Hexists(key, field interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HEXISTS", key, field)
	c.send(CmdHexists, r)
	return r
}

// Hget - Get the value of a hash field
// Group: hash
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Hget(key, field interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HGET", key, field)
	c.send(CmdHget, r)
	return r
}

// Hgetall - Get all the fields and values in a hash
// Group: hash
// Since: 2.0.0
// Complexity: O(N) where N is the size of the hash.
func (c *command) Hgetall(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HGETALL", key)
	c.send(CmdHgetall, r)
	return r
}

// Hincrby - Increment the integer value of a hash field by the given number
// Group: hash
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Hincrby(key, field interface{}, increment int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HINCRBY", key, field, increment)
	c.send(CmdHincrby, r)
	return r
}

// Hincrbyfloat - Increment the float value of a hash field by the given amount
// Group: hash
// Since: 2.6.0
// Complexity: O(1)
func (c *command) Hincrbyfloat(key, field interface{}, increment float64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HINCRBYFLOAT", key, field, increment)
	c.send(CmdHincrbyfloat, r)
	return r
}

// Hkeys - Get all the fields in a hash
// Group: hash
// Since: 2.0.0
// Complexity: O(N) where N is the size of the hash.
func (c *command) Hkeys(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HKEYS", key)
	c.send(CmdHkeys, r)
	return r
}

// Hlen - Get the number of fields in a hash
// Group: hash
// Since: 2.0.0
// Complexity: O(1)
func (c *command) Hlen(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HLEN", key)
	c.send(CmdHlen, r)
	return r
}

// Hmget - Get the values of all the given hash fields
// Group: hash
// Since: 2.0.0
// Complexity: O(N) where N is the number of fields being requested.
func (c *command) Hmget(key interface{}, field []interface{}) Result {
	r := newResult()
	if field == nil {
		r.setErr(newInvalidValueError("field", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "HMGET", key)
	for _, v := range field {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdHmget, r)
	return r
}

// Hscan - Incrementally iterate hash fields and associated values
// Group: hash
// Since: 2.8.0
// Complexity:
// O(1) for every call. O(N) for a complete iteration, including enough command
// calls for the cursor to return back to 0. N is the number of elements inside the
// collection..
func (c *command) Hscan(key interface{}, cursor int64, match *string, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HSCAN", key, cursor)
	if match != nil {
		r.request.cmd = append(r.request.cmd, "MATCH", match)
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	c.send(CmdHscan, r)
	return r
}

// Hset - Set the string value of a hash field
// Group: hash
// Since: 2.0.0
// Complexity:
// O(1) for each field/value pair added, so O(N) to add N field/value pairs when
// the command is called with multiple field/value pairs.
func (c *command) Hset(key interface{}, fieldValue []FieldValue) Result {
	r := newResult()
	if fieldValue == nil {
		r.setErr(newInvalidValueError("fieldValue", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "HSET", key)
	for _, v := range fieldValue {
		r.request.cmd = append(r.request.cmd, v.Field, v.Value)
	}
	c.send(CmdHset, r)
	return r
}

// HsetNx - Set the value of a hash field, only if the field does not exist
// Group: hash
// Since: 2.0.0
// Complexity: O(1)
func (c *command) HsetNx(key, field, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HSETNX", key, field, value)
	c.send(CmdHsetNx, r)
	return r
}

// Hstrlen - Get the length of the value of a hash field
// Group: hash
// Since: 3.2.0
// Complexity: O(1)
func (c *command) Hstrlen(key, field interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HSTRLEN", key, field)
	c.send(CmdHstrlen, r)
	return r
}

// Hvals - Get all the values in a hash
// Group: hash
// Since: 2.0.0
// Complexity: O(N) where N is the size of the hash.
func (c *command) Hvals(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "HVALS", key)
	c.send(CmdHvals, r)
	return r
}

// Incr - Increment the integer value of a key by one
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Incr(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "INCR", key)
	c.send(CmdIncr, r)
	return r
}

// Incrby - Increment the integer value of a key by the given amount
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Incrby(key interface{}, increment int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "INCRBY", key, increment)
	c.send(CmdIncrby, r)
	return r
}

// Incrbyfloat - Increment the float value of a key by the given amount
// Group: string
// Since: 2.6.0
// Complexity: O(1)
func (c *command) Incrbyfloat(key interface{}, increment float64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "INCRBYFLOAT", key, increment)
	c.send(CmdIncrbyfloat, r)
	return r
}

// Info - Get information and statistics about the server
// Group: server
// Since: 1.0.0
func (c *command) Info(section *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "INFO")
	if section != nil {
		r.request.cmd = append(r.request.cmd, section)
	}
	c.send(CmdInfo, r)
	return r
}

// Keys - Find all keys matching the given pattern
// Group: generic
// Since: 1.0.0
// Complexity:
// O(N) with N being the number of keys in the database, under the assumption that
// the key names in the database and the given pattern have limited length.
func (c *command) Keys(pattern string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "KEYS", pattern)
	c.send(CmdKeys, r)
	return r
}

// Lastsave - Get the UNIX time stamp of the last successful save to disk
// Group: server
// Since: 1.0.0
func (c *command) Lastsave() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LASTSAVE")
	c.send(CmdLastsave, r)
	return r
}

// LatencyDoctor - Return a human readable latency analysis report.
// Group: server
// Since: 2.8.13
func (c *command) LatencyDoctor() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "DOCTOR")
	c.send(CmdLatencyDoctor, r)
	return r
}

// LatencyGraph - Return a latency graph for the event.
// Group: server
// Since: 2.8.13
func (c *command) LatencyGraph(event string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "GRAPH", event)
	c.send(CmdLatencyGraph, r)
	return r
}

// LatencyHelp - Show helpful text about the different subcommands.
// Group: server
// Since: 2.8.13
func (c *command) LatencyHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "HELP")
	c.send(CmdLatencyHelp, r)
	return r
}

// LatencyHistory - Return timestamp-latency samples for the event.
// Group: server
// Since: 2.8.13
func (c *command) LatencyHistory(event string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "HISTORY", event)
	c.send(CmdLatencyHistory, r)
	return r
}

// LatencyLatest - Return the latest latency samples for all events.
// Group: server
// Since: 2.8.13
func (c *command) LatencyLatest() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "LATEST")
	c.send(CmdLatencyLatest, r)
	return r
}

// LatencyReset - Reset latency data for one or more events.
// Group: server
// Since: 2.8.13
func (c *command) LatencyReset(event []string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LATENCY", "RESET")
	for _, v := range event {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdLatencyReset, r)
	return r
}

// Lindex - Get an element from a list by its index
// Group: list
// Since: 1.0.0
// Complexity:
// O(N) where N is the number of elements to traverse to get to the element at
// index. This makes asking for the first or the last element of the list O(1).
func (c *command) Lindex(key interface{}, index int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LINDEX", key, index)
	c.send(CmdLindex, r)
	return r
}

// Linsert - Insert an element before or after another element in a list
// Group: list
// Since: 2.2.0
// Complexity:
// O(N) where N is the number of elements to traverse before seeing the value
// pivot. This means that inserting somewhere on the left end on the list (head) can be
// considered O(1) and inserting somewhere on the right end (tail) is O(N).
func (c *command) Linsert(key interface{}, before bool, pivot, element interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LINSERT", key)
	if before {
		r.request.cmd = append(r.request.cmd, "BEFORE")
	} else {
		r.request.cmd = append(r.request.cmd, "AFTER")
	}
	r.request.cmd = append(r.request.cmd, pivot, element)
	c.send(CmdLinsert, r)
	return r
}

// Llen - Get the length of a list
// Group: list
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Llen(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LLEN", key)
	c.send(CmdLlen, r)
	return r
}

// Lolwut - Display some computer art and the Redis version
// Group: server
// Since: 5.0.0
func (c *command) Lolwut(version *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LOLWUT")
	if version != nil {
		r.request.cmd = append(r.request.cmd, "VERSION", version)
	}
	c.send(CmdLolwut, r)
	return r
}

// Lpop - Remove and get the first element in a list
// Group: list
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Lpop(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LPOP", key)
	c.send(CmdLpop, r)
	return r
}

// Lpos - Return the index of matching elements on a list
// Group: list
// Since: 6.0.6
// Complexity:
// O(N) where N is the number of elements in the list, for the average case. When
// searching for elements near the head or the tail of the list, or when the MAXLEN option
// is provided, the command may run in constant time.
func (c *command) Lpos(key, element interface{}, rank, count, maxlen *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LPOS", key, element)
	if rank != nil {
		r.request.cmd = append(r.request.cmd, "RANK", rank)
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if maxlen != nil {
		r.request.cmd = append(r.request.cmd, "MAXLEN", maxlen)
	}
	c.send(CmdLpos, r)
	return r
}

// Lpush - Prepend one or multiple elements to a list
// Group: list
// Since: 1.0.0
// Complexity:
// O(1) for each element added, so O(N) to add N elements when the command is
// called with multiple arguments.
func (c *command) Lpush(key interface{}, element []interface{}) Result {
	r := newResult()
	if element == nil {
		r.setErr(newInvalidValueError("element", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "LPUSH", key)
	for _, v := range element {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdLpush, r)
	return r
}

// Lpushx - Prepend an element to a list, only if the list exists
// Group: list
// Since: 2.2.0
// Complexity:
// O(1) for each element added, so O(N) to add N elements when the command is
// called with multiple arguments.
func (c *command) Lpushx(key interface{}, element []interface{}) Result {
	r := newResult()
	if element == nil {
		r.setErr(newInvalidValueError("element", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "LPUSHX", key)
	for _, v := range element {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdLpushx, r)
	return r
}

// Lrange - Get a range of elements from a list
// Group: list
// Since: 1.0.0
// Complexity:
// O(S+N) where S is the distance of start offset from HEAD for small lists, from
// nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the
// specified range.
func (c *command) Lrange(key interface{}, start, stop int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LRANGE", key, start, stop)
	c.send(CmdLrange, r)
	return r
}

// Lrem - Remove elements from a list
// Group: list
// Since: 1.0.0
// Complexity:
// O(N+M) where N is the length of the list and M is the number of elements
// removed.
func (c *command) Lrem(key interface{}, count int64, element interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LREM", key, count, element)
	c.send(CmdLrem, r)
	return r
}

// Lset - Set the value of an element in a list by its index
// Group: list
// Since: 1.0.0
// Complexity:
// O(N) where N is the length of the list. Setting either the first or the last
// element of the list is O(1).
func (c *command) Lset(key interface{}, index int64, element interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LSET", key, index, element)
	c.send(CmdLset, r)
	return r
}

// Ltrim - Trim a list to the specified range
// Group: list
// Since: 1.0.0
// Complexity: O(N) where N is the number of elements to be removed by the operation.
func (c *command) Ltrim(key interface{}, start, stop int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "LTRIM", key, start, stop)
	c.send(CmdLtrim, r)
	return r
}

// MemoryDoctor - Outputs memory problems report
// Group: server
// Since: 4.0.0
func (c *command) MemoryDoctor() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "DOCTOR")
	c.send(CmdMemoryDoctor, r)
	return r
}

// MemoryHelp - Show helpful text about the different subcommands
// Group: server
// Since: 4.0.0
func (c *command) MemoryHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "HELP")
	c.send(CmdMemoryHelp, r)
	return r
}

// MemoryMallocStats - Show allocator internal stats
// Group: server
// Since: 4.0.0
func (c *command) MemoryMallocStats() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "MALLOC-STATS")
	c.send(CmdMemoryMallocStats, r)
	return r
}

// MemoryPurge - Ask the allocator to release memory
// Group: server
// Since: 4.0.0
func (c *command) MemoryPurge() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "PURGE")
	c.send(CmdMemoryPurge, r)
	return r
}

// MemoryStats - Show memory usage details
// Group: server
// Since: 4.0.0
func (c *command) MemoryStats() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "STATS")
	c.send(CmdMemoryStats, r)
	return r
}

// MemoryUsage - Estimate the memory usage of a key
// Group: server
// Since: 4.0.0
// Complexity: O(N) where N is the number of samples.
func (c *command) MemoryUsage(key interface{}, samples *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MEMORY", "USAGE", key)
	if samples != nil {
		r.request.cmd = append(r.request.cmd, "SAMPLES", samples)
	}
	c.send(CmdMemoryUsage, r)
	return r
}

// Mget - Get the values of all the given keys
// Group: string
// Since: 1.0.0
// Complexity: O(N) where N is the number of keys to retrieve.
func (c *command) Mget(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "MGET")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdMget, r)
	return r
}

// Migrate - Atomically transfer a key from a Redis instance to another one.
// Group: generic
// Since: 2.6.0
// Complexity:
// This command actually executes a DUMP+DEL in the source instance, and a RESTORE
// in the target instance. See the pages of these commands for time complexity. Also
// an O(N) data transfer between the two instances is performed.
func (c *command) Migrate(host, port string, key interface{}, destinationDb, timeout int64, copy, replace bool, auth *string, keys []interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MIGRATE", host, port, key, destinationDb, timeout)
	if copy {
		r.request.cmd = append(r.request.cmd, "COPY")
	}
	if replace {
		r.request.cmd = append(r.request.cmd, "REPLACE")
	}
	if auth != nil {
		r.request.cmd = append(r.request.cmd, "AUTH", auth)
	}
	if keys != nil {
		r.request.cmd = append(r.request.cmd, "KEYS")
		for _, v := range keys {
			r.request.cmd = append(r.request.cmd, v)
		}
	}
	c.send(CmdMigrate, r)
	return r
}

// ModuleList - List all modules loaded by the server
// Group: server
// Since: 4.0.0
// Complexity: O(N) where N is the number of loaded modules.
func (c *command) ModuleList() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MODULE", "LIST")
	c.send(CmdModuleList, r)
	return r
}

// ModuleLoad - Load a module
// Group: server
// Since: 4.0.0
// Complexity: O(1)
func (c *command) ModuleLoad(path string, arg []string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MODULE", "LOAD", path)
	for _, v := range arg {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdModuleLoad, r)
	return r
}

// ModuleUnload - Unload a module
// Group: server
// Since: 4.0.0
// Complexity: O(1)
func (c *command) ModuleUnload(name string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MODULE", "UNLOAD", name)
	c.send(CmdModuleUnload, r)
	return r
}

// Monitor - Listen for all requests received by the server in real time
// Group: server
// Since: 1.0.0
func (c *command) Monitor() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MONITOR")
	c.send(CmdMonitor, r)
	return r
}

// Move - Move a key to another database
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Move(key interface{}, db int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MOVE", key, db)
	c.send(CmdMove, r)
	return r
}

// Mset - Set multiple keys to multiple values
// Group: string
// Since: 1.0.1
// Complexity: O(N) where N is the number of keys to set.
func (c *command) Mset(keyValue []KeyValue) Result {
	r := newResult()
	if keyValue == nil {
		r.setErr(newInvalidValueError("keyValue", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "MSET")
	for _, v := range keyValue {
		r.request.cmd = append(r.request.cmd, v.Key, v.Value)
	}
	c.send(CmdMset, r)
	return r
}

// MsetNx - Set multiple keys to multiple values, only if none of the keys exist
// Group: string
// Since: 1.0.1
// Complexity: O(N) where N is the number of keys to set.
func (c *command) MsetNx(keyValue []KeyValue) Result {
	r := newResult()
	if keyValue == nil {
		r.setErr(newInvalidValueError("keyValue", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "MSETNX")
	for _, v := range keyValue {
		r.request.cmd = append(r.request.cmd, v.Key, v.Value)
	}
	c.send(CmdMsetNx, r)
	return r
}

// Multi - Mark the start of a transaction block
// Group: transactions
// Since: 1.2.0
func (c *command) Multi() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "MULTI")
	c.send(CmdMulti, r)
	return r
}

// ObjectEncoding - Inspect the internals of Redis objects
// Group: generic
// Since: 2.2.3
// Complexity: O(1) for all the currently implemented subcommands.
func (c *command) ObjectEncoding(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "OBJECT", "ENCODING", key)
	c.send(CmdObjectEncoding, r)
	return r
}

// ObjectFreq - Inspect the internals of Redis objects
// Group: generic
// Since: 2.2.3
// Complexity: O(1) for all the currently implemented subcommands.
func (c *command) ObjectFreq(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "OBJECT", "FREQ", key)
	c.send(CmdObjectFreq, r)
	return r
}

// ObjectHelp - Inspect the internals of Redis objects
// Group: generic
// Since: 2.2.3
// Complexity: O(1) for all the currently implemented subcommands.
func (c *command) ObjectHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "OBJECT", "HELP")
	c.send(CmdObjectHelp, r)
	return r
}

// ObjectIdletime - Inspect the internals of Redis objects
// Group: generic
// Since: 2.2.3
// Complexity: O(1) for all the currently implemented subcommands.
func (c *command) ObjectIdletime(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "OBJECT", "IDLETIME", key)
	c.send(CmdObjectIdletime, r)
	return r
}

// ObjectRefcount - Inspect the internals of Redis objects
// Group: generic
// Since: 2.2.3
// Complexity: O(1) for all the currently implemented subcommands.
func (c *command) ObjectRefcount(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "OBJECT", "REFCOUNT", key)
	c.send(CmdObjectRefcount, r)
	return r
}

// PTTL - Get the time to live for a key in milliseconds
// Group: generic
// Since: 2.6.0
// Complexity: O(1)
func (c *command) PTTL(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PTTL", key)
	c.send(CmdPTTL, r)
	return r
}

// Persist - Remove the expiration from a key
// Group: generic
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Persist(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PERSIST", key)
	c.send(CmdPersist, r)
	return r
}

// Pexpire - Set a key's time to live in milliseconds
// Group: generic
// Since: 2.6.0
// Complexity: O(1)
func (c *command) Pexpire(key interface{}, milliseconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PEXPIRE", key, milliseconds)
	c.send(CmdPexpire, r)
	return r
}

// Pexpireat - Set the expiration for a key as a UNIX timestamp specified in milliseconds
// Group: generic
// Since: 2.6.0
// Complexity: O(1)
func (c *command) Pexpireat(key interface{}, millisecondsTimestamp int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PEXPIREAT", key, millisecondsTimestamp)
	c.send(CmdPexpireat, r)
	return r
}

// Pfadd - Adds the specified elements to the specified HyperLogLog.
// Group: hyperloglog
// Since: 2.8.9
// Complexity: O(1) to add every element.
func (c *command) Pfadd(key interface{}, element []interface{}) Result {
	r := newResult()
	if element == nil {
		r.setErr(newInvalidValueError("element", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "PFADD", key)
	for _, v := range element {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdPfadd, r)
	return r
}

// Pfcount - Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).
// Group: hyperloglog
// Since: 2.8.9
// Complexity:
// O(1) with a very small average constant time when called with a single key.
// O(N) with N being the number of keys, and much bigger constant times, when called
// with multiple keys.
func (c *command) Pfcount(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "PFCOUNT")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdPfcount, r)
	return r
}

// Pfmerge - Merge N different HyperLogLogs into a single one.
// Group: hyperloglog
// Since: 2.8.9
// Complexity: O(N) to merge N HyperLogLogs, but with high constant times.
func (c *command) Pfmerge(destkey interface{}, sourcekey []interface{}) Result {
	r := newResult()
	if sourcekey == nil {
		r.setErr(newInvalidValueError("sourcekey", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "PFMERGE", destkey)
	for _, v := range sourcekey {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdPfmerge, r)
	return r
}

// Ping - Ping the server
// Group: connection
// Since: 1.0.0
func (c *command) Ping(message *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PING")
	if message != nil {
		r.request.cmd = append(r.request.cmd, message)
	}
	c.send(CmdPing, r)
	return r
}

// Psubscribe - Listen for messages published to channels matching the given patterns
// Group: pubsub
// Since: 2.0.0
// Complexity: O(N) where N is the number of patterns the client is already subscribed to.
func (c *command) Psubscribe(pattern []string, cb MsgCallback) Result {
	r := newResult()
	if pattern == nil {
		r.setErr(newInvalidValueError("pattern", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "PSUBSCRIBE")
	for _, v := range pattern {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cb = cb
	c.send(CmdPsubscribe, r)
	return r
}

// Psync - Internal command used for replication
// Group: server
// Since: 2.8.0
func (c *command) Psync(replicationid, offset int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PSYNC", replicationid, offset)
	c.send(CmdPsync, r)
	return r
}

// Publish - Post a message to a channel
// Group: pubsub
// Since: 2.0.0
// Complexity:
// O(N+M) where N is the number of clients subscribed to the receiving channel and
// M is the total number of subscribed patterns (by any client).
func (c *command) Publish(channel, message string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PUBLISH", channel, message)
	c.send(CmdPublish, r)
	return r
}

// PubsubChannels - Inspect the state of the Pub/Sub subsystem
// Group: pubsub
// Since: 2.8.0
// Complexity:
// O(N) for the CHANNELS subcommand, where N is the number of active channels, and
// assuming constant time pattern matching (relatively short channels and patterns). O(N)
// for the NUMSUB subcommand, where N is the number of requested channels. O(1) for
// the NUMPAT subcommand.
func (c *command) PubsubChannels(pattern *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PUBSUB", "CHANNELS")
	if pattern != nil {
		r.request.cmd = append(r.request.cmd, pattern)
	}
	c.send(CmdPubsubChannels, r)
	return r
}

// PubsubNumpat - Inspect the state of the Pub/Sub subsystem
// Group: pubsub
// Since: 2.8.0
// Complexity:
// O(N) for the CHANNELS subcommand, where N is the number of active channels, and
// assuming constant time pattern matching (relatively short channels and patterns). O(N)
// for the NUMSUB subcommand, where N is the number of requested channels. O(1) for
// the NUMPAT subcommand.
func (c *command) PubsubNumpat() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PUBSUB", "NUMPAT")
	c.send(CmdPubsubNumpat, r)
	return r
}

// PubsubNumsub - Inspect the state of the Pub/Sub subsystem
// Group: pubsub
// Since: 2.8.0
// Complexity:
// O(N) for the CHANNELS subcommand, where N is the number of active channels, and
// assuming constant time pattern matching (relatively short channels and patterns). O(N)
// for the NUMSUB subcommand, where N is the number of requested channels. O(1) for
// the NUMPAT subcommand.
func (c *command) PubsubNumsub(channel []string) Result {
	r := newResult()
	if channel == nil {
		r.setErr(newInvalidValueError("channel", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "PUBSUB", "NUMSUB")
	for _, v := range channel {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdPubsubNumsub, r)
	return r
}

// Punsubscribe - Stop listening for messages posted to channels matching the given patterns
// Group: pubsub
// Since: 2.0.0
// Complexity:
// O(N+M) where N is the number of patterns the client is already subscribed and M
// is the number of total patterns subscribed in the system (by any client).
func (c *command) Punsubscribe(pattern []string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "PUNSUBSCRIBE")
	for _, v := range pattern {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdPunsubscribe, r)
	return r
}

// Quit - Close the connection
// Group: connection
// Since: 1.0.0
func (c *command) Quit() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "QUIT")
	c.send(CmdQuit, r)
	return r
}

// Randomkey - Return a random key from the keyspace
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Randomkey() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RANDOMKEY")
	c.send(CmdRandomkey, r)
	return r
}

// Readonly - Enables read queries for a connection to a cluster replica node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) Readonly() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "READONLY")
	c.send(CmdReadonly, r)
	return r
}

// Readwrite - Disables read queries for a connection to a cluster replica node
// Group: cluster
// Since: 3.0.0
// Complexity: O(1)
func (c *command) Readwrite() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "READWRITE")
	c.send(CmdReadwrite, r)
	return r
}

// Rename - Rename a key
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Rename(key, newkey interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RENAME", key, newkey)
	c.send(CmdRename, r)
	return r
}

// RenameNx - Rename a key, only if the new key does not exist
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) RenameNx(key, newkey interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RENAMENX", key, newkey)
	c.send(CmdRenameNx, r)
	return r
}

// Replicaof - Make the server a replica of another instance, or promote it as master.
// Group: server
// Since: 5.0.0
func (c *command) Replicaof(host, port string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "REPLICAOF", host, port)
	c.send(CmdReplicaof, r)
	return r
}

// Restore - Create a key using the provided serialized value, previously obtained using DUMP.
// Group: generic
// Since: 2.6.0
// Complexity:
// O(1) to create the new key and additional O(N*M) to reconstruct the serialized
// value, where N is the number of Redis objects composing the value and M their average
// size. For small string values the time complexity is thus O(1)+O(1*M) where M is
// small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N))
// because inserting values into sorted sets is O(log(N)).
func (c *command) Restore(key interface{}, ttl int64, serializedValue string, replace, absttl bool, idletime, freq *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RESTORE", key, ttl, serializedValue)
	if replace {
		r.request.cmd = append(r.request.cmd, "REPLACE")
	}
	if absttl {
		r.request.cmd = append(r.request.cmd, "ABSTTL")
	}
	if idletime != nil {
		r.request.cmd = append(r.request.cmd, "IDLETIME", idletime)
	}
	if freq != nil {
		r.request.cmd = append(r.request.cmd, "FREQ", freq)
	}
	c.send(CmdRestore, r)
	return r
}

// Role - Return the role of the instance in the context of replication
// Group: server
// Since: 2.8.12
func (c *command) Role() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ROLE")
	c.send(CmdRole, r)
	return r
}

// Rpop - Remove and get the last element in a list
// Group: list
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Rpop(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RPOP", key)
	c.send(CmdRpop, r)
	return r
}

// Rpoplpush - Remove the last element in a list, prepend it to another list and return it
// Group: list
// Since: 1.2.0
// Complexity: O(1)
func (c *command) Rpoplpush(source, destination interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "RPOPLPUSH", source, destination)
	c.send(CmdRpoplpush, r)
	return r
}

// Rpush - Append one or multiple elements to a list
// Group: list
// Since: 1.0.0
// Complexity:
// O(1) for each element added, so O(N) to add N elements when the command is
// called with multiple arguments.
func (c *command) Rpush(key interface{}, element []interface{}) Result {
	r := newResult()
	if element == nil {
		r.setErr(newInvalidValueError("element", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "RPUSH", key)
	for _, v := range element {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdRpush, r)
	return r
}

// Rpushx - Append an element to a list, only if the list exists
// Group: list
// Since: 2.2.0
// Complexity:
// O(1) for each element added, so O(N) to add N elements when the command is
// called with multiple arguments.
func (c *command) Rpushx(key interface{}, element []interface{}) Result {
	r := newResult()
	if element == nil {
		r.setErr(newInvalidValueError("element", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "RPUSHX", key)
	for _, v := range element {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdRpushx, r)
	return r
}

// Sadd - Add one or more members to a set
// Group: set
// Since: 1.0.0
// Complexity:
// O(1) for each element added, so O(N) to add N elements when the command is
// called with multiple arguments.
func (c *command) Sadd(key interface{}, member []interface{}) Result {
	r := newResult()
	if member == nil {
		r.setErr(newInvalidValueError("member", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SADD", key)
	for _, v := range member {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSadd, r)
	return r
}

// Save - Synchronously save the dataset to disk
// Group: server
// Since: 1.0.0
func (c *command) Save() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SAVE")
	c.send(CmdSave, r)
	return r
}

// Scan - Incrementally iterate the keys space
// Group: generic
// Since: 2.8.0
// Complexity:
// O(1) for every call. O(N) for a complete iteration, including enough command
// calls for the cursor to return back to 0. N is the number of elements inside the
// collection.
func (c *command) Scan(cursor int64, match *string, count *int64, typ *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCAN", cursor)
	if match != nil {
		r.request.cmd = append(r.request.cmd, "MATCH", match)
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if typ != nil {
		r.request.cmd = append(r.request.cmd, "TYPE", typ)
	}
	c.send(CmdScan, r)
	return r
}

// Scard - Get the number of members in a set
// Group: set
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Scard(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCARD", key)
	c.send(CmdScard, r)
	return r
}

// ScriptDebug - Set the debug mode for executed scripts.
// Group: scripting
// Since: 3.2.0
// Complexity: O(1)
func (c *command) ScriptDebug(mode Mode) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCRIPT", "DEBUG", mode)
	c.send(CmdScriptDebug, r)
	return r
}

// ScriptExists - Check existence of scripts in the script cache.
// Group: scripting
// Since: 2.6.0
// Complexity:
// O(N) with N being the number of scripts to check (so checking a single script
// is an O(1) operation).
func (c *command) ScriptExists(sha1 []string) Result {
	r := newResult()
	if sha1 == nil {
		r.setErr(newInvalidValueError("sha1", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SCRIPT", "EXISTS")
	for _, v := range sha1 {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdScriptExists, r)
	return r
}

// ScriptFlush - Remove all the scripts from the script cache.
// Group: scripting
// Since: 2.6.0
// Complexity: O(N) with N being the number of scripts in cache
func (c *command) ScriptFlush() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCRIPT", "FLUSH")
	c.send(CmdScriptFlush, r)
	return r
}

// ScriptKill - Kill the script currently in execution.
// Group: scripting
// Since: 2.6.0
// Complexity: O(1)
func (c *command) ScriptKill() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCRIPT", "KILL")
	c.send(CmdScriptKill, r)
	return r
}

// ScriptLoad - Load the specified Lua script into the script cache.
// Group: scripting
// Since: 2.6.0
// Complexity: O(N) with N being the length in bytes of the script body.
func (c *command) ScriptLoad(script string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SCRIPT", "LOAD", script)
	c.send(CmdScriptLoad, r)
	return r
}

// Sdiff - Subtract multiple sets
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the total number of elements in all given sets.
func (c *command) Sdiff(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SDIFF")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSdiff, r)
	return r
}

// Sdiffstore - Subtract multiple sets and store the resulting set in a key
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the total number of elements in all given sets.
func (c *command) Sdiffstore(destination interface{}, key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SDIFFSTORE", destination)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSdiffstore, r)
	return r
}

// Select - Change the selected database for the current connection
// Group: connection
// Since: 1.0.0
func (c *command) Select(index int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SELECT", index)
	c.send(CmdSelect, r)
	return r
}

// Set - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Set(key, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value)
	c.send(CmdSet, r)
	return r
}

// SetEx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetEx(key, value interface{}, seconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "EX", seconds)
	c.send(CmdSetEx, r)
	return r
}

// SetExNx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetExNx(key, value interface{}, seconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "EX", seconds, "NX")
	c.send(CmdSetExNx, r)
	return r
}

// SetExXx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetExXx(key, value interface{}, seconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "EX", seconds, "XX")
	c.send(CmdSetExXx, r)
	return r
}

// SetNx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetNx(key, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "NX")
	c.send(CmdSetNx, r)
	return r
}

// SetPx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetPx(key, value interface{}, milliseconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "PX", milliseconds)
	c.send(CmdSetPx, r)
	return r
}

// SetPxNx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetPxNx(key, value interface{}, milliseconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "PX", milliseconds, "NX")
	c.send(CmdSetPxNx, r)
	return r
}

// SetPxXx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetPxXx(key, value interface{}, milliseconds int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "PX", milliseconds, "XX")
	c.send(CmdSetPxXx, r)
	return r
}

// SetXx - Set the string value of a key
// Group: string
// Since: 1.0.0
// Complexity: O(1)
func (c *command) SetXx(key, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SET", key, value, "XX")
	c.send(CmdSetXx, r)
	return r
}

// Setbit - Sets or clears the bit at offset in the string value stored at key
// Group: string
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Setbit(key interface{}, offset, value int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SETBIT", key, offset, value)
	c.send(CmdSetbit, r)
	return r
}

// Setrange - Overwrite part of a string at key starting at the specified offset
// Group: string
// Since: 2.2.0
// Complexity:
// O(1), not counting the time taken to copy the new string in place. Usually,
// this string is very small so the amortized complexity is O(1). Otherwise, complexity
// is O(M) with M being the length of the value argument.
func (c *command) Setrange(key interface{}, offset int64, value interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SETRANGE", key, offset, value)
	c.send(CmdSetrange, r)
	return r
}

// Shutdown - Synchronously save the dataset to disk and then shut down the server
// Group: server
// Since: 1.0.0
func (c *command) Shutdown(nosave *bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SHUTDOWN")
	if nosave != nil {
		if *nosave {
			r.request.cmd = append(r.request.cmd, "NOSAVE")
		} else {
			r.request.cmd = append(r.request.cmd, "SAVE")
		}
	}
	c.send(CmdShutdown, r)
	return r
}

// Sinter - Intersect multiple sets
// Group: set
// Since: 1.0.0
// Complexity:
// O(N*M) worst case where N is the cardinality of the smallest set and M is the
// number of sets.
func (c *command) Sinter(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SINTER")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSinter, r)
	return r
}

// Sinterstore - Intersect multiple sets and store the resulting set in a key
// Group: set
// Since: 1.0.0
// Complexity:
// O(N*M) worst case where N is the cardinality of the smallest set and M is the
// number of sets.
func (c *command) Sinterstore(destination interface{}, key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SINTERSTORE", destination)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSinterstore, r)
	return r
}

// Sismember - Determine if a given value is a member of a set
// Group: set
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Sismember(key, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SISMEMBER", key, member)
	c.send(CmdSismember, r)
	return r
}

// SlowlogGet - Manages the Redis slow queries log
// Group: server
// Since: 2.2.12
func (c *command) SlowlogGet(count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SLOWLOG", "GET")
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdSlowlogGet, r)
	return r
}

// SlowlogLen - Manages the Redis slow queries log
// Group: server
// Since: 2.2.12
func (c *command) SlowlogLen() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SLOWLOG", "LEN")
	c.send(CmdSlowlogLen, r)
	return r
}

// SlowlogReset - Manages the Redis slow queries log
// Group: server
// Since: 2.2.12
func (c *command) SlowlogReset() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SLOWLOG", "RESET")
	c.send(CmdSlowlogReset, r)
	return r
}

// Smembers - Get all the members in a set
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the set cardinality.
func (c *command) Smembers(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SMEMBERS", key)
	c.send(CmdSmembers, r)
	return r
}

// Smove - Move a member from one set to another
// Group: set
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Smove(source, destination, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SMOVE", source, destination, member)
	c.send(CmdSmove, r)
	return r
}

// Sort - Sort the elements in a list, set or sorted set
// Group: generic
// Since: 1.0.0
// Complexity:
// O(N+M*log(M)) where N is the number of elements in the list or set to sort, and
// M the number of returned elements. When the elements are not sorted, complexity
// is currently O(N) as there is a copy step that will be avoided in next releases.
func (c *command) Sort(key interface{}, by *string, limit *OffsetCount, get []string, asc *bool, sorting bool, store *interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SORT", key)
	if by != nil {
		r.request.cmd = append(r.request.cmd, "BY", by)
	}
	if limit != nil {
		r.request.cmd = append(r.request.cmd, "LIMIT", limit.Offset, limit.Count)
	}
	if get != nil {
		r.request.cmd = append(r.request.cmd, "GET")
		for _, v := range get {
			r.request.cmd = append(r.request.cmd, v)
		}
	}
	if asc != nil {
		if *asc {
			r.request.cmd = append(r.request.cmd, "ASC")
		} else {
			r.request.cmd = append(r.request.cmd, "DESC")
		}
	}
	if sorting {
		r.request.cmd = append(r.request.cmd, "ALPHA")
	}
	if store != nil {
		r.request.cmd = append(r.request.cmd, "STORE", store)
	}
	c.send(CmdSort, r)
	return r
}

// Spop - Remove and return one or multiple random members from a set
// Group: set
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Spop(key interface{}, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SPOP", key)
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdSpop, r)
	return r
}

// Srandmember - Get one or multiple random members from a set
// Group: set
// Since: 1.0.0
// Complexity:
// Without the count argument O(1), otherwise O(N) where N is the absolute value
// of the passed count.
func (c *command) Srandmember(key interface{}, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SRANDMEMBER", key)
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdSrandmember, r)
	return r
}

// Srem - Remove one or more members from a set
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the number of members to be removed.
func (c *command) Srem(key interface{}, member []interface{}) Result {
	r := newResult()
	if member == nil {
		r.setErr(newInvalidValueError("member", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SREM", key)
	for _, v := range member {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSrem, r)
	return r
}

// Sscan - Incrementally iterate Set elements
// Group: set
// Since: 2.8.0
// Complexity:
// O(1) for every call. O(N) for a complete iteration, including enough command
// calls for the cursor to return back to 0. N is the number of elements inside the
// collection..
func (c *command) Sscan(key interface{}, cursor int64, match *string, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SSCAN", key, cursor)
	if match != nil {
		r.request.cmd = append(r.request.cmd, "MATCH", match)
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	c.send(CmdSscan, r)
	return r
}

// StralgoLcsIdxKeys - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsIdxKeys(key1, key2 interface{}, withmatchlen bool, minmatchlen *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "IDX", "keys", key1, key2)
	if withmatchlen {
		r.request.cmd = append(r.request.cmd, "WITHMATCHLEN")
	}
	if minmatchlen != nil {
		r.request.cmd = append(r.request.cmd, "MINMATCHLEN", minmatchlen)
	}
	c.send(CmdStralgoLcsIdxKeys, r)
	return r
}

// StralgoLcsIdxStrings - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsIdxStrings(string1, string2 string, withmatchlen bool, minmatchlen *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "IDX", "strings", string1, string2)
	if withmatchlen {
		r.request.cmd = append(r.request.cmd, "WITHMATCHLEN")
	}
	if minmatchlen != nil {
		r.request.cmd = append(r.request.cmd, "MINMATCHLEN", minmatchlen)
	}
	c.send(CmdStralgoLcsIdxStrings, r)
	return r
}

// StralgoLcsKeys - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsKeys(key1, key2 interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "keys", key1, key2)
	c.send(CmdStralgoLcsKeys, r)
	return r
}

// StralgoLcsLenKeys - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsLenKeys(key1, key2 interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "LEN", "keys", key1, key2)
	c.send(CmdStralgoLcsLenKeys, r)
	return r
}

// StralgoLcsLenStrings - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsLenStrings(string1, string2 string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "LEN", "strings", string1, string2)
	c.send(CmdStralgoLcsLenStrings, r)
	return r
}

// StralgoLcsStrings - Run algorithms (currently LCS) against strings
// Group: string
// Since: 6.0.0
// Complexity: For LCS O(strlen(s1)*strlen(s2))
func (c *command) StralgoLcsStrings(string1, string2 string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRALGO", "LCS", "strings", string1, string2)
	c.send(CmdStralgoLcsStrings, r)
	return r
}

// Strlen - Get the length of the value stored in a key
// Group: string
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Strlen(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "STRLEN", key)
	c.send(CmdStrlen, r)
	return r
}

// Subscribe - Listen for messages published to the given channels
// Group: pubsub
// Since: 2.0.0
// Complexity: O(N) where N is the number of channels to subscribe to.
func (c *command) Subscribe(channel []string, cb MsgCallback) Result {
	r := newResult()
	if channel == nil {
		r.setErr(newInvalidValueError("channel", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SUBSCRIBE")
	for _, v := range channel {
		r.request.cmd = append(r.request.cmd, v)
	}
	r.request.cb = cb
	c.send(CmdSubscribe, r)
	return r
}

// Sunion - Add multiple sets
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the total number of elements in all given sets.
func (c *command) Sunion(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SUNION")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSunion, r)
	return r
}

// Sunionstore - Add multiple sets and store the resulting set in a key
// Group: set
// Since: 1.0.0
// Complexity: O(N) where N is the total number of elements in all given sets.
func (c *command) Sunionstore(destination interface{}, key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "SUNIONSTORE", destination)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdSunionstore, r)
	return r
}

// Swapdb - Swaps two Redis databases
// Group: server
// Since: 4.0.0
func (c *command) Swapdb(index1, index2 int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "SWAPDB", index1, index2)
	c.send(CmdSwapdb, r)
	return r
}

// TTL - Get the time to live for a key
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) TTL(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "TTL", key)
	c.send(CmdTTL, r)
	return r
}

// Time - Return the current server time
// Group: server
// Since: 2.6.0
// Complexity: O(1)
func (c *command) Time() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "TIME")
	c.send(CmdTime, r)
	return r
}

// Touch - Alters the last access time of a key(s). Returns the number of existing keys specified.
// Group: generic
// Since: 3.2.1
// Complexity: O(N) where N is the number of keys that will be touched.
func (c *command) Touch(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "TOUCH")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdTouch, r)
	return r
}

// Type - Determine the type stored at key
// Group: generic
// Since: 1.0.0
// Complexity: O(1)
func (c *command) Type(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "TYPE", key)
	c.send(CmdType, r)
	return r
}

// Unlink - Delete a key asynchronously in another thread. Otherwise it is just as DEL, but non blocking.
// Group: generic
// Since: 4.0.0
// Complexity:
// O(1) for each key removed regardless of its size. Then the command does O(N)
// work in a different thread in order to reclaim memory, where N is the number of
// allocations the deleted objects where composed of.
func (c *command) Unlink(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "UNLINK")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdUnlink, r)
	return r
}

// Unsubscribe - Stop listening for messages posted to the given channels
// Group: pubsub
// Since: 2.0.0
// Complexity: O(N) where N is the number of clients already subscribed to a channel.
func (c *command) Unsubscribe(channel []string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "UNSUBSCRIBE")
	for _, v := range channel {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdUnsubscribe, r)
	return r
}

// Unwatch - Forget about all watched keys
// Group: transactions
// Since: 2.2.0
// Complexity: O(1)
func (c *command) Unwatch() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "UNWATCH")
	c.send(CmdUnwatch, r)
	return r
}

// Wait - Wait for the synchronous replication of all the write commands sent in the context of the current connection
// Group: generic
// Since: 3.0.0
// Complexity: O(1)
func (c *command) Wait(numreplicas, timeout int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "WAIT", numreplicas, timeout)
	c.send(CmdWait, r)
	return r
}

// Watch - Watch the given keys to determine execution of the MULTI/EXEC block
// Group: transactions
// Since: 2.2.0
// Complexity: O(1) for every key.
func (c *command) Watch(key []interface{}) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "WATCH")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdWatch, r)
	return r
}

// Xack - Marks a pending message as correctly processed, effectively removing it from the pending entries list of the consumer group. Return value of the command is the number of messages successfully acknowledged, that is, the IDs we were actually able to resolve in the PEL.
// Group: stream
// Since: 5.0.0
// Complexity: O(1) for each message ID processed.
func (c *command) Xack(key interface{}, group string, id []string) Result {
	r := newResult()
	if id == nil {
		r.setErr(newInvalidValueError("id", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XACK", key, group)
	for _, v := range id {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdXack, r)
	return r
}

// Xadd - Appends a new entry to a stream
// Group: stream
// Since: 5.0.0
// Complexity: O(1)
func (c *command) Xadd(key interface{}, id string, fieldValue []FieldValue) Result {
	r := newResult()
	if fieldValue == nil {
		r.setErr(newInvalidValueError("fieldValue", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XADD", key, id)
	for _, v := range fieldValue {
		r.request.cmd = append(r.request.cmd, v.Field, v.Value)
	}
	c.send(CmdXadd, r)
	return r
}

// Xclaim - Changes (or acquires) ownership of a message in a consumer group, as if the message was delivered to the specified consumer.
// Group: stream
// Since: 5.0.0
// Complexity: O(log N) with N being the number of messages in the PEL of the consumer group.
func (c *command) Xclaim(key interface{}, group, consumer, minIdleTime string, id []string, idle, time, retrycount *int64, force, justid bool) Result {
	r := newResult()
	if id == nil {
		r.setErr(newInvalidValueError("id", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XCLAIM", key, group, consumer, minIdleTime)
	for _, v := range id {
		r.request.cmd = append(r.request.cmd, v)
	}
	if idle != nil {
		r.request.cmd = append(r.request.cmd, "IDLE", idle)
	}
	if time != nil {
		r.request.cmd = append(r.request.cmd, "TIME", time)
	}
	if retrycount != nil {
		r.request.cmd = append(r.request.cmd, "RETRYCOUNT", retrycount)
	}
	if force {
		r.request.cmd = append(r.request.cmd, "FORCE")
	}
	if justid {
		r.request.cmd = append(r.request.cmd, "JUSTID")
	}
	c.send(CmdXclaim, r)
	return r
}

// Xdel - Removes the specified entries from the stream. Returns the number of items actually deleted, that may be different from the number of IDs passed in case certain IDs do not exist.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for each single item to delete in the stream, regardless of the stream
// size.
func (c *command) Xdel(key interface{}, id []string) Result {
	r := newResult()
	if id == nil {
		r.setErr(newInvalidValueError("id", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XDEL", key)
	for _, v := range id {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdXdel, r)
	return r
}

// XgroupCreate - Create, destroy, and manage consumer groups.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for all the subcommands, with the exception of the DESTROY subcommand
// which takes an additional O(M) time in order to delete the M entries inside the
// consumer group pending entries list (PEL).
func (c *command) XgroupCreate(key interface{}, groupname, id string, mkstream bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XGROUP", "CREATE", key, groupname, id)
	if mkstream {
		r.request.cmd = append(r.request.cmd, "MKSTREAM")
	}
	c.send(CmdXgroupCreate, r)
	return r
}

// XgroupDelconsumer - Create, destroy, and manage consumer groups.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for all the subcommands, with the exception of the DESTROY subcommand
// which takes an additional O(M) time in order to delete the M entries inside the
// consumer group pending entries list (PEL).
func (c *command) XgroupDelconsumer(key interface{}, groupname, consumername string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XGROUP", "DELCONSUMER", key, groupname, consumername)
	c.send(CmdXgroupDelconsumer, r)
	return r
}

// XgroupDestroy - Create, destroy, and manage consumer groups.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for all the subcommands, with the exception of the DESTROY subcommand
// which takes an additional O(M) time in order to delete the M entries inside the
// consumer group pending entries list (PEL).
func (c *command) XgroupDestroy(key interface{}, groupname string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XGROUP", "DESTROY", key, groupname)
	c.send(CmdXgroupDestroy, r)
	return r
}

// XgroupHelp - Create, destroy, and manage consumer groups.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for all the subcommands, with the exception of the DESTROY subcommand
// which takes an additional O(M) time in order to delete the M entries inside the
// consumer group pending entries list (PEL).
func (c *command) XgroupHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XGROUP", "HELP")
	c.send(CmdXgroupHelp, r)
	return r
}

// XgroupSetid - Create, destroy, and manage consumer groups.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(1) for all the subcommands, with the exception of the DESTROY subcommand
// which takes an additional O(M) time in order to delete the M entries inside the
// consumer group pending entries list (PEL).
func (c *command) XgroupSetid(key interface{}, groupname, id string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XGROUP", "SETID", key, groupname, id)
	c.send(CmdXgroupSetid, r)
	return r
}

// XinfoConsumers - Get information on streams and consumer groups
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of returned items for the subcommands CONSUMERS
// and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in
// the stream.
func (c *command) XinfoConsumers(key interface{}, groupname string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XINFO", "CONSUMERS", key, groupname)
	c.send(CmdXinfoConsumers, r)
	return r
}

// XinfoGroups - Get information on streams and consumer groups
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of returned items for the subcommands CONSUMERS
// and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in
// the stream.
func (c *command) XinfoGroups(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XINFO", "GROUPS", key)
	c.send(CmdXinfoGroups, r)
	return r
}

// XinfoHelp - Get information on streams and consumer groups
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of returned items for the subcommands CONSUMERS
// and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in
// the stream.
func (c *command) XinfoHelp() Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XINFO", "HELP")
	c.send(CmdXinfoHelp, r)
	return r
}

// XinfoStream - Get information on streams and consumer groups
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of returned items for the subcommands CONSUMERS
// and GROUPS. The STREAM subcommand is O(log N) with N being the number of items in
// the stream.
func (c *command) XinfoStream(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XINFO", "STREAM", key)
	c.send(CmdXinfoStream, r)
	return r
}

// Xlen - Return the number of entires in a stream
// Group: stream
// Since: 5.0.0
// Complexity: O(1)
func (c *command) Xlen(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XLEN", key)
	c.send(CmdXlen, r)
	return r
}

// Xpending - Return information and entries from a stream consumer group pending entries list, that are messages fetched but never acknowledged.
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of elements returned, so asking for a small fixed
// number of entries per call is O(1). When the command returns just the summary it runs
// in O(1) time assuming the list of consumers is small, otherwise there is
// additional O(N) time needed to iterate every consumer.
func (c *command) Xpending(key interface{}, group string, startEndCount *StartEndCount, consumer *string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XPENDING", key, group)
	if startEndCount != nil {
		r.request.cmd = append(r.request.cmd, startEndCount.Start, startEndCount.End, startEndCount.Count)
	}
	if consumer != nil {
		r.request.cmd = append(r.request.cmd, consumer)
	}
	c.send(CmdXpending, r)
	return r
}

// Xrange - Return a range of elements in a stream, with IDs matching the specified IDs interval
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of elements being returned. If N is constant (e.g.
// always asking for the first 10 elements with COUNT), you can consider it O(1).
func (c *command) Xrange(key interface{}, start, end string, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XRANGE", key, start, end)
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	c.send(CmdXrange, r)
	return r
}

// Xread - Return never seen elements in multiple streams, with IDs greater than the ones reported by the caller for each stream. Can block.
// Group: stream
// Since: 5.0.0
// Complexity:
// For each stream mentioned: O(N) with N being the number of elements being
// returned, it means that XREAD-ing with a fixed COUNT is O(1). Note that when the BLOCK
// option is used, XADD will pay O(M) time in order to serve the M clients blocked on the
// stream getting new data.
func (c *command) Xread(count, block *int64, key []interface{}, id []string) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	if id == nil {
		r.setErr(newInvalidValueError("id", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XREAD")
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if block != nil {
		r.request.cmd = append(r.request.cmd, "BLOCK", block)
	}
	r.request.cmd = append(r.request.cmd, "STREAMS")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	for _, v := range id {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdXread, r)
	return r
}

// Xreadgroup - Return new entries from a stream using a consumer group, or access the history of the pending entries for a given consumer. Can block.
// Group: stream
// Since: 5.0.0
// Complexity:
// For each stream mentioned: O(M) with M being the number of elements returned.
// If M is constant (e.g. always asking for the first 10 elements with COUNT), you
// can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the
// O(N) time in order to serve the N clients blocked on the stream getting new data.
func (c *command) Xreadgroup(group GroupConsumer, count, block *int64, noack bool, key []interface{}, id []string) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	if id == nil {
		r.setErr(newInvalidValueError("id", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "XREADGROUP", "GROUP", group.Group, group.Consumer)
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	if block != nil {
		r.request.cmd = append(r.request.cmd, "BLOCK", block)
	}
	if noack {
		r.request.cmd = append(r.request.cmd, "NOACK")
	}
	r.request.cmd = append(r.request.cmd, "STREAMS")
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	for _, v := range id {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdXreadgroup, r)
	return r
}

// Xrevrange - Return a range of elements in a stream, with IDs matching the specified IDs interval, in reverse order (from greater to smaller IDs) compared to XRANGE
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N) with N being the number of elements returned. If N is constant (e.g.
// always asking for the first 10 elements with COUNT), you can consider it O(1).
func (c *command) Xrevrange(key interface{}, end, start string, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XREVRANGE", key, end, start)
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	c.send(CmdXrevrange, r)
	return r
}

// Xtrim - Trims the stream to (approximately if '~' is passed) a certain size
// Group: stream
// Since: 5.0.0
// Complexity:
// O(N), with N being the number of evicted entries. Constant times are very small
// however, since entries are organized in macro nodes containing multiple entries that can
// be released with a single deallocation.
func (c *command) Xtrim(key interface{}, approx bool, count int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "XTRIM", key, "MAXLEN")
	if approx {
		r.request.cmd = append(r.request.cmd, "~")
	}
	r.request.cmd = append(r.request.cmd, count)
	c.send(CmdXtrim, r)
	return r
}

// Zadd - Add one or more members to a sorted set, or update its score if it already exists
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) Zadd(key interface{}, scoreMember []ScoreMember) Result {
	r := newResult()
	if scoreMember == nil {
		r.setErr(newInvalidValueError("scoreMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZADD", key)
	for _, v := range scoreMember {
		r.request.cmd = append(r.request.cmd, v.Score, v.Member)
	}
	c.send(CmdZadd, r)
	return r
}

// ZaddCh - Add one or more members to a sorted set, or update its score if it already exists
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) ZaddCh(key interface{}, scoreMember []ScoreMember) Result {
	r := newResult()
	if scoreMember == nil {
		r.setErr(newInvalidValueError("scoreMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZADD", key, "CH")
	for _, v := range scoreMember {
		r.request.cmd = append(r.request.cmd, v.Score, v.Member)
	}
	c.send(CmdZaddCh, r)
	return r
}

// ZaddNx - Add one or more members to a sorted set, or update its score if it already exists
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) ZaddNx(key interface{}, scoreMember []ScoreMember) Result {
	r := newResult()
	if scoreMember == nil {
		r.setErr(newInvalidValueError("scoreMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZADD", key, "NX")
	for _, v := range scoreMember {
		r.request.cmd = append(r.request.cmd, v.Score, v.Member)
	}
	c.send(CmdZaddNx, r)
	return r
}

// ZaddXx - Add one or more members to a sorted set, or update its score if it already exists
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) ZaddXx(key interface{}, scoreMember []ScoreMember) Result {
	r := newResult()
	if scoreMember == nil {
		r.setErr(newInvalidValueError("scoreMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZADD", key, "XX")
	for _, v := range scoreMember {
		r.request.cmd = append(r.request.cmd, v.Score, v.Member)
	}
	c.send(CmdZaddXx, r)
	return r
}

// ZaddXxCh - Add one or more members to a sorted set, or update its score if it already exists
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)) for each item added, where N is the number of elements in the sorted
// set.
func (c *command) ZaddXxCh(key interface{}, scoreMember []ScoreMember) Result {
	r := newResult()
	if scoreMember == nil {
		r.setErr(newInvalidValueError("scoreMember", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZADD", key, "XX", "CH")
	for _, v := range scoreMember {
		r.request.cmd = append(r.request.cmd, v.Score, v.Member)
	}
	c.send(CmdZaddXxCh, r)
	return r
}

// Zcard - Get the number of members in a sorted set
// Group: sorted_set
// Since: 1.2.0
// Complexity: O(1)
func (c *command) Zcard(key interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZCARD", key)
	c.send(CmdZcard, r)
	return r
}

// Zcount - Count the members in a sorted set with scores within the given values
// Group: sorted_set
// Since: 2.0.0
// Complexity: O(log(N)) with N being the number of elements in the sorted set.
func (c *command) Zcount(key interface{}, min, max Zfloat64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZCOUNT", key, min, max)
	c.send(CmdZcount, r)
	return r
}

// Zincrby - Increment the score of a member in a sorted set
// Group: sorted_set
// Since: 1.2.0
// Complexity: O(log(N)) where N is the number of elements in the sorted set.
func (c *command) Zincrby(key interface{}, increment float64, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZINCRBY", key, increment, member)
	c.send(CmdZincrby, r)
	return r
}

// Zinterstore - Intersect multiple sorted sets and store the resulting sorted set in a new key
// Group: sorted_set
// Since: 2.0.0
// Complexity:
// O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K
// being the number of input sorted sets and M being the number of elements in the
// resulting sorted set.
func (c *command) Zinterstore(destination interface{}, numkeys int64, key []interface{}, weights []int64, aggregate *Aggregate) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZINTERSTORE", destination, numkeys)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	if weights != nil {
		r.request.cmd = append(r.request.cmd, "WEIGHTS")
		for _, v := range weights {
			r.request.cmd = append(r.request.cmd, v)
		}
	}
	if aggregate != nil {
		r.request.cmd = append(r.request.cmd, "AGGREGATE", aggregate)
	}
	c.send(CmdZinterstore, r)
	return r
}

// Zlexcount - Count the number of members in a sorted set between a given lexicographical range
// Group: sorted_set
// Since: 2.8.9
// Complexity: O(log(N)) with N being the number of elements in the sorted set.
func (c *command) Zlexcount(key interface{}, min, max string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZLEXCOUNT", key, min, max)
	c.send(CmdZlexcount, r)
	return r
}

// Zpopmax - Remove and return members with the highest scores in a sorted set
// Group: sorted_set
// Since: 5.0.0
// Complexity:
// O(log(N)*M) with N being the number of elements in the sorted set, and M being
// the number of elements popped.
func (c *command) Zpopmax(key interface{}, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZPOPMAX", key)
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdZpopmax, r)
	return r
}

// Zpopmin - Remove and return members with the lowest scores in a sorted set
// Group: sorted_set
// Since: 5.0.0
// Complexity:
// O(log(N)*M) with N being the number of elements in the sorted set, and M being
// the number of elements popped.
func (c *command) Zpopmin(key interface{}, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZPOPMIN", key)
	if count != nil {
		r.request.cmd = append(r.request.cmd, count)
	}
	c.send(CmdZpopmin, r)
	return r
}

// Zrange - Return a range of members in a sorted set, by index
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements returned.
func (c *command) Zrange(key interface{}, start, stop int64, withscores bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZRANGE", key, start, stop)
	if withscores {
		r.request.cmd = append(r.request.cmd, "WITHSCORES")
	}
	c.send(CmdZrange, r)
	return r
}

// Zrangebylex - Return a range of members in a sorted set, by lexicographical range
// Group: sorted_set
// Since: 2.8.9
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements being returned. If M is constant (e.g. always asking for the first
// 10 elements with LIMIT), you can consider it O(log(N)).
func (c *command) Zrangebylex(key interface{}, min, max string, limit *OffsetCount) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZRANGEBYLEX", key, min, max)
	if limit != nil {
		r.request.cmd = append(r.request.cmd, "LIMIT", limit.Offset, limit.Count)
	}
	c.send(CmdZrangebylex, r)
	return r
}

// Zrangebyscore - Return a range of members in a sorted set, by score
// Group: sorted_set
// Since: 1.0.5
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements being returned. If M is constant (e.g. always asking for the first
// 10 elements with LIMIT), you can consider it O(log(N)).
func (c *command) Zrangebyscore(key interface{}, min, max Zfloat64, withscores bool, limit *OffsetCount) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZRANGEBYSCORE", key, min, max)
	if withscores {
		r.request.cmd = append(r.request.cmd, "WITHSCORES")
	}
	if limit != nil {
		r.request.cmd = append(r.request.cmd, "LIMIT", limit.Offset, limit.Count)
	}
	c.send(CmdZrangebyscore, r)
	return r
}

// Zrank - Determine the index of a member in a sorted set
// Group: sorted_set
// Since: 2.0.0
// Complexity: O(log(N))
func (c *command) Zrank(key, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZRANK", key, member)
	c.send(CmdZrank, r)
	return r
}

// Zrem - Remove one or more members from a sorted set
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(M*log(N)) with N being the number of elements in the sorted set and M the
// number of elements to be removed.
func (c *command) Zrem(key interface{}, member []interface{}) Result {
	r := newResult()
	if member == nil {
		r.setErr(newInvalidValueError("member", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZREM", key)
	for _, v := range member {
		r.request.cmd = append(r.request.cmd, v)
	}
	c.send(CmdZrem, r)
	return r
}

// Zremrangebylex - Remove all members in a sorted set between the given lexicographical range
// Group: sorted_set
// Since: 2.8.9
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements removed by the operation.
func (c *command) Zremrangebylex(key interface{}, min, max string) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREMRANGEBYLEX", key, min, max)
	c.send(CmdZremrangebylex, r)
	return r
}

// Zremrangebyrank - Remove all members in a sorted set within the given indexes
// Group: sorted_set
// Since: 2.0.0
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements removed by the operation.
func (c *command) Zremrangebyrank(key interface{}, start, stop int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREMRANGEBYRANK", key, start, stop)
	c.send(CmdZremrangebyrank, r)
	return r
}

// Zremrangebyscore - Remove all members in a sorted set within the given scores
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements removed by the operation.
func (c *command) Zremrangebyscore(key interface{}, min, max Zfloat64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREMRANGEBYSCORE", key, min, max)
	c.send(CmdZremrangebyscore, r)
	return r
}

// Zrevrange - Return a range of members in a sorted set, by index, with scores ordered from high to low
// Group: sorted_set
// Since: 1.2.0
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements returned.
func (c *command) Zrevrange(key interface{}, start, stop int64, withscores bool) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREVRANGE", key, start, stop)
	if withscores {
		r.request.cmd = append(r.request.cmd, "WITHSCORES")
	}
	c.send(CmdZrevrange, r)
	return r
}

// Zrevrangebylex - Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.
// Group: sorted_set
// Since: 2.8.9
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements being returned. If M is constant (e.g. always asking for the first
// 10 elements with LIMIT), you can consider it O(log(N)).
func (c *command) Zrevrangebylex(key interface{}, max, min string, limit *OffsetCount) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREVRANGEBYLEX", key, max, min)
	if limit != nil {
		r.request.cmd = append(r.request.cmd, "LIMIT", limit.Offset, limit.Count)
	}
	c.send(CmdZrevrangebylex, r)
	return r
}

// Zrevrangebyscore - Return a range of members in a sorted set, by score, with scores ordered from high to low
// Group: sorted_set
// Since: 2.2.0
// Complexity:
// O(log(N)+M) with N being the number of elements in the sorted set and M the
// number of elements being returned. If M is constant (e.g. always asking for the first
// 10 elements with LIMIT), you can consider it O(log(N)).
func (c *command) Zrevrangebyscore(key interface{}, max, min Zfloat64, withscores bool, limit *OffsetCount) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREVRANGEBYSCORE", key, max, min)
	if withscores {
		r.request.cmd = append(r.request.cmd, "WITHSCORES")
	}
	if limit != nil {
		r.request.cmd = append(r.request.cmd, "LIMIT", limit.Offset, limit.Count)
	}
	c.send(CmdZrevrangebyscore, r)
	return r
}

// Zrevrank - Determine the index of a member in a sorted set, with scores ordered from high to low
// Group: sorted_set
// Since: 2.0.0
// Complexity: O(log(N))
func (c *command) Zrevrank(key, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZREVRANK", key, member)
	c.send(CmdZrevrank, r)
	return r
}

// Zscan - Incrementally iterate sorted sets elements and associated scores
// Group: sorted_set
// Since: 2.8.0
// Complexity:
// O(1) for every call. O(N) for a complete iteration, including enough command
// calls for the cursor to return back to 0. N is the number of elements inside the
// collection..
func (c *command) Zscan(key interface{}, cursor int64, match *string, count *int64) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZSCAN", key, cursor)
	if match != nil {
		r.request.cmd = append(r.request.cmd, "MATCH", match)
	}
	if count != nil {
		r.request.cmd = append(r.request.cmd, "COUNT", count)
	}
	c.send(CmdZscan, r)
	return r
}

// Zscore - Get the score associated with the given member in a sorted set
// Group: sorted_set
// Since: 1.2.0
// Complexity: O(1)
func (c *command) Zscore(key, member interface{}) Result {
	r := newResult()
	r.request.cmd = append(r.request.cmd, "ZSCORE", key, member)
	c.send(CmdZscore, r)
	return r
}

// Zunionstore - Add multiple sorted sets and store the resulting sorted set in a new key
// Group: sorted_set
// Since: 2.0.0
// Complexity:
// O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets,
// and M being the number of elements in the resulting sorted set.
func (c *command) Zunionstore(destination interface{}, numkeys int64, key []interface{}, weights []int64, aggregate *Aggregate) Result {
	r := newResult()
	if key == nil {
		r.setErr(newInvalidValueError("key", nil))
		return r
	}
	r.request.cmd = append(r.request.cmd, "ZUNIONSTORE", destination, numkeys)
	for _, v := range key {
		r.request.cmd = append(r.request.cmd, v)
	}
	if weights != nil {
		r.request.cmd = append(r.request.cmd, "WEIGHTS")
		for _, v := range weights {
			r.request.cmd = append(r.request.cmd, v)
		}
	}
	if aggregate != nil {
		r.request.cmd = append(r.request.cmd, "AGGREGATE", aggregate)
	}
	c.send(CmdZunionstore, r)
	return r
}

const (
	GroupCluster      = "Cluster"
	GroupConnection   = "Connection"
	GroupGeneric      = "Generic"
	GroupGeo          = "Geo"
	GroupHash         = "Hash"
	GroupHyperloglog  = "Hyperloglog"
	GroupList         = "List"
	GroupPubsub       = "Pubsub"
	GroupScripting    = "Scripting"
	GroupServer       = "Server"
	GroupSet          = "Set"
	GroupSortedSet    = "SortedSet"
	GroupStream       = "Stream"
	GroupString       = "String"
	GroupTransactions = "Transactions"
)

var Groups = map[string][]string{GroupCluster: {CmdClusterAddslots, CmdClusterBumpepoch, CmdClusterCountFailureReports, CmdClusterCountkeysinslot, CmdClusterDelslots, CmdClusterFailover, CmdClusterFlushslots, CmdClusterForget, CmdClusterGetkeysinslot, CmdClusterInfo, CmdClusterKeyslot, CmdClusterMeet, CmdClusterMyid, CmdClusterNodes, CmdClusterReplicas, CmdClusterReplicate, CmdClusterReset, CmdClusterSaveconfig, CmdClusterSetConfigEpoch, CmdClusterSetslotImporting, CmdClusterSetslotMigrating, CmdClusterSetslotNode, CmdClusterSetslotStable, CmdClusterSlots, CmdReadonly, CmdReadwrite}, GroupConnection: {CmdAuth, CmdClientCaching, CmdClientGetname, CmdClientGetredir, CmdClientId, CmdClientKill, CmdClientList, CmdClientPause, CmdClientReply, CmdClientSetname, CmdClientTracking, CmdClientUnblock, CmdEcho, CmdHello, CmdPing, CmdQuit, CmdSelect}, GroupGeneric: {CmdDel, CmdDo, CmdDump, CmdExists, CmdExpire, CmdExpireat, CmdKeys, CmdMigrate, CmdMove, CmdObjectEncoding, CmdObjectFreq, CmdObjectHelp, CmdObjectIdletime, CmdObjectRefcount, CmdPTTL, CmdPersist, CmdPexpire, CmdPexpireat, CmdRandomkey, CmdRename, CmdRenameNx, CmdRestore, CmdScan, CmdSort, CmdTTL, CmdTouch, CmdType, CmdUnlink, CmdWait}, GroupGeo: {CmdGeoadd, CmdGeodist, CmdGeohash, CmdGeopos, CmdGeoradius, CmdGeoradiusbymember}, GroupHash: {CmdHdel, CmdHexists, CmdHget, CmdHgetall, CmdHincrby, CmdHincrbyfloat, CmdHkeys, CmdHlen, CmdHmget, CmdHscan, CmdHset, CmdHsetNx, CmdHstrlen, CmdHvals}, GroupHyperloglog: {CmdPfadd, CmdPfcount, CmdPfmerge}, GroupList: {CmdBlpop, CmdBrpop, CmdBrpoplpush, CmdLindex, CmdLinsert, CmdLlen, CmdLpop, CmdLpos, CmdLpush, CmdLpushx, CmdLrange, CmdLrem, CmdLset, CmdLtrim, CmdRpop, CmdRpoplpush, CmdRpush, CmdRpushx}, GroupPubsub: {CmdPsubscribe, CmdPublish, CmdPubsubChannels, CmdPubsubNumpat, CmdPubsubNumsub, CmdPunsubscribe, CmdSubscribe, CmdUnsubscribe}, GroupScripting: {CmdEval, CmdEvalsha, CmdScriptDebug, CmdScriptExists, CmdScriptFlush, CmdScriptKill, CmdScriptLoad}, GroupServer: {CmdAclCat, CmdAclDeluser, CmdAclGenpass, CmdAclGetuser, CmdAclHelp, CmdAclList, CmdAclLoad, CmdAclLogCount, CmdAclLogReset, CmdAclSave, CmdAclSetuser, CmdAclUsers, CmdAclWhoami, CmdBgrewriteaof, CmdBgsave, CmdCommand, CmdCommandCount, CmdCommandGetkeys, CmdCommandInfo, CmdConfigGet, CmdConfigResetstat, CmdConfigRewrite, CmdConfigSet, CmdDbsize, CmdDebugObject, CmdDebugSegfault, CmdFlushall, CmdFlushdb, CmdInfo, CmdLastsave, CmdLatencyDoctor, CmdLatencyGraph, CmdLatencyHelp, CmdLatencyHistory, CmdLatencyLatest, CmdLatencyReset, CmdLolwut, CmdMemoryDoctor, CmdMemoryHelp, CmdMemoryMallocStats, CmdMemoryPurge, CmdMemoryStats, CmdMemoryUsage, CmdModuleList, CmdModuleLoad, CmdModuleUnload, CmdMonitor, CmdPsync, CmdReplicaof, CmdRole, CmdSave, CmdShutdown, CmdSlowlogGet, CmdSlowlogLen, CmdSlowlogReset, CmdSwapdb, CmdTime}, GroupSet: {CmdSadd, CmdScard, CmdSdiff, CmdSdiffstore, CmdSinter, CmdSinterstore, CmdSismember, CmdSmembers, CmdSmove, CmdSpop, CmdSrandmember, CmdSrem, CmdSscan, CmdSunion, CmdSunionstore}, GroupSortedSet: {CmdBzpopmax, CmdBzpopmin, CmdZadd, CmdZaddCh, CmdZaddNx, CmdZaddXx, CmdZaddXxCh, CmdZcard, CmdZcount, CmdZincrby, CmdZinterstore, CmdZlexcount, CmdZpopmax, CmdZpopmin, CmdZrange, CmdZrangebylex, CmdZrangebyscore, CmdZrank, CmdZrem, CmdZremrangebylex, CmdZremrangebyrank, CmdZremrangebyscore, CmdZrevrange, CmdZrevrangebylex, CmdZrevrangebyscore, CmdZrevrank, CmdZscan, CmdZscore, CmdZunionstore}, GroupStream: {CmdXack, CmdXadd, CmdXclaim, CmdXdel, CmdXgroupCreate, CmdXgroupDelconsumer, CmdXgroupDestroy, CmdXgroupHelp, CmdXgroupSetid, CmdXinfoConsumers, CmdXinfoGroups, CmdXinfoHelp, CmdXinfoStream, CmdXlen, CmdXpending, CmdXrange, CmdXread, CmdXreadgroup, CmdXrevrange, CmdXtrim}, GroupString: {CmdAppend, CmdBitcount, CmdBitfield, CmdBitopAnd, CmdBitopNot, CmdBitopOr, CmdBitopXor, CmdBitpos, CmdDecr, CmdDecrby, CmdGet, CmdGetbit, CmdGetrange, CmdGetset, CmdIncr, CmdIncrby, CmdIncrbyfloat, CmdMget, CmdMset, CmdMsetNx, CmdSet, CmdSetEx, CmdSetExNx, CmdSetExXx, CmdSetNx, CmdSetPx, CmdSetPxNx, CmdSetPxXx, CmdSetXx, CmdSetbit, CmdSetrange, CmdStralgoLcsIdxKeys, CmdStralgoLcsIdxStrings, CmdStralgoLcsKeys, CmdStralgoLcsLenKeys, CmdStralgoLcsLenStrings, CmdStralgoLcsStrings, CmdStrlen}, GroupTransactions: {CmdDiscard, CmdExec, CmdMulti, CmdUnwatch, CmdWatch},
}

const (
	CmdAclCat                     = "AclCat"
	CmdAclDeluser                 = "AclDeluser"
	CmdAclGenpass                 = "AclGenpass"
	CmdAclGetuser                 = "AclGetuser"
	CmdAclHelp                    = "AclHelp"
	CmdAclList                    = "AclList"
	CmdAclLoad                    = "AclLoad"
	CmdAclLogCount                = "AclLogCount"
	CmdAclLogReset                = "AclLogReset"
	CmdAclSave                    = "AclSave"
	CmdAclSetuser                 = "AclSetuser"
	CmdAclUsers                   = "AclUsers"
	CmdAclWhoami                  = "AclWhoami"
	CmdAppend                     = "Append"
	CmdAuth                       = "Auth"
	CmdBgrewriteaof               = "Bgrewriteaof"
	CmdBgsave                     = "Bgsave"
	CmdBitcount                   = "Bitcount"
	CmdBitfield                   = "Bitfield"
	CmdBitopAnd                   = "BitopAnd"
	CmdBitopNot                   = "BitopNot"
	CmdBitopOr                    = "BitopOr"
	CmdBitopXor                   = "BitopXor"
	CmdBitpos                     = "Bitpos"
	CmdBlpop                      = "Blpop"
	CmdBrpop                      = "Brpop"
	CmdBrpoplpush                 = "Brpoplpush"
	CmdBzpopmax                   = "Bzpopmax"
	CmdBzpopmin                   = "Bzpopmin"
	CmdClientCaching              = "ClientCaching"
	CmdClientGetname              = "ClientGetname"
	CmdClientGetredir             = "ClientGetredir"
	CmdClientId                   = "ClientId"
	CmdClientKill                 = "ClientKill"
	CmdClientList                 = "ClientList"
	CmdClientPause                = "ClientPause"
	CmdClientReply                = "ClientReply"
	CmdClientSetname              = "ClientSetname"
	CmdClientTracking             = "ClientTracking"
	CmdClientUnblock              = "ClientUnblock"
	CmdClusterAddslots            = "ClusterAddslots"
	CmdClusterBumpepoch           = "ClusterBumpepoch"
	CmdClusterCountFailureReports = "ClusterCountFailureReports"
	CmdClusterCountkeysinslot     = "ClusterCountkeysinslot"
	CmdClusterDelslots            = "ClusterDelslots"
	CmdClusterFailover            = "ClusterFailover"
	CmdClusterFlushslots          = "ClusterFlushslots"
	CmdClusterForget              = "ClusterForget"
	CmdClusterGetkeysinslot       = "ClusterGetkeysinslot"
	CmdClusterInfo                = "ClusterInfo"
	CmdClusterKeyslot             = "ClusterKeyslot"
	CmdClusterMeet                = "ClusterMeet"
	CmdClusterMyid                = "ClusterMyid"
	CmdClusterNodes               = "ClusterNodes"
	CmdClusterReplicas            = "ClusterReplicas"
	CmdClusterReplicate           = "ClusterReplicate"
	CmdClusterReset               = "ClusterReset"
	CmdClusterSaveconfig          = "ClusterSaveconfig"
	CmdClusterSetConfigEpoch      = "ClusterSetConfigEpoch"
	CmdClusterSetslotImporting    = "ClusterSetslotImporting"
	CmdClusterSetslotMigrating    = "ClusterSetslotMigrating"
	CmdClusterSetslotNode         = "ClusterSetslotNode"
	CmdClusterSetslotStable       = "ClusterSetslotStable"
	CmdClusterSlots               = "ClusterSlots"
	CmdCommand                    = "Command"
	CmdCommandCount               = "CommandCount"
	CmdCommandGetkeys             = "CommandGetkeys"
	CmdCommandInfo                = "CommandInfo"
	CmdConfigGet                  = "ConfigGet"
	CmdConfigResetstat            = "ConfigResetstat"
	CmdConfigRewrite              = "ConfigRewrite"
	CmdConfigSet                  = "ConfigSet"
	CmdDbsize                     = "Dbsize"
	CmdDebugObject                = "DebugObject"
	CmdDebugSegfault              = "DebugSegfault"
	CmdDecr                       = "Decr"
	CmdDecrby                     = "Decrby"
	CmdDel                        = "Del"
	CmdDiscard                    = "Discard"
	CmdDo                         = "Do"
	CmdDump                       = "Dump"
	CmdEcho                       = "Echo"
	CmdEval                       = "Eval"
	CmdEvalsha                    = "Evalsha"
	CmdExec                       = "Exec"
	CmdExists                     = "Exists"
	CmdExpire                     = "Expire"
	CmdExpireat                   = "Expireat"
	CmdFlushall                   = "Flushall"
	CmdFlushdb                    = "Flushdb"
	CmdGeoadd                     = "Geoadd"
	CmdGeodist                    = "Geodist"
	CmdGeohash                    = "Geohash"
	CmdGeopos                     = "Geopos"
	CmdGeoradius                  = "Georadius"
	CmdGeoradiusbymember          = "Georadiusbymember"
	CmdGet                        = "Get"
	CmdGetbit                     = "Getbit"
	CmdGetrange                   = "Getrange"
	CmdGetset                     = "Getset"
	CmdHdel                       = "Hdel"
	CmdHello                      = "Hello"
	CmdHexists                    = "Hexists"
	CmdHget                       = "Hget"
	CmdHgetall                    = "Hgetall"
	CmdHincrby                    = "Hincrby"
	CmdHincrbyfloat               = "Hincrbyfloat"
	CmdHkeys                      = "Hkeys"
	CmdHlen                       = "Hlen"
	CmdHmget                      = "Hmget"
	CmdHscan                      = "Hscan"
	CmdHset                       = "Hset"
	CmdHsetNx                     = "HsetNx"
	CmdHstrlen                    = "Hstrlen"
	CmdHvals                      = "Hvals"
	CmdIncr                       = "Incr"
	CmdIncrby                     = "Incrby"
	CmdIncrbyfloat                = "Incrbyfloat"
	CmdInfo                       = "Info"
	CmdKeys                       = "Keys"
	CmdLastsave                   = "Lastsave"
	CmdLatencyDoctor              = "LatencyDoctor"
	CmdLatencyGraph               = "LatencyGraph"
	CmdLatencyHelp                = "LatencyHelp"
	CmdLatencyHistory             = "LatencyHistory"
	CmdLatencyLatest              = "LatencyLatest"
	CmdLatencyReset               = "LatencyReset"
	CmdLindex                     = "Lindex"
	CmdLinsert                    = "Linsert"
	CmdLlen                       = "Llen"
	CmdLolwut                     = "Lolwut"
	CmdLpop                       = "Lpop"
	CmdLpos                       = "Lpos"
	CmdLpush                      = "Lpush"
	CmdLpushx                     = "Lpushx"
	CmdLrange                     = "Lrange"
	CmdLrem                       = "Lrem"
	CmdLset                       = "Lset"
	CmdLtrim                      = "Ltrim"
	CmdMemoryDoctor               = "MemoryDoctor"
	CmdMemoryHelp                 = "MemoryHelp"
	CmdMemoryMallocStats          = "MemoryMallocStats"
	CmdMemoryPurge                = "MemoryPurge"
	CmdMemoryStats                = "MemoryStats"
	CmdMemoryUsage                = "MemoryUsage"
	CmdMget                       = "Mget"
	CmdMigrate                    = "Migrate"
	CmdModuleList                 = "ModuleList"
	CmdModuleLoad                 = "ModuleLoad"
	CmdModuleUnload               = "ModuleUnload"
	CmdMonitor                    = "Monitor"
	CmdMove                       = "Move"
	CmdMset                       = "Mset"
	CmdMsetNx                     = "MsetNx"
	CmdMulti                      = "Multi"
	CmdObjectEncoding             = "ObjectEncoding"
	CmdObjectFreq                 = "ObjectFreq"
	CmdObjectHelp                 = "ObjectHelp"
	CmdObjectIdletime             = "ObjectIdletime"
	CmdObjectRefcount             = "ObjectRefcount"
	CmdPTTL                       = "PTTL"
	CmdPersist                    = "Persist"
	CmdPexpire                    = "Pexpire"
	CmdPexpireat                  = "Pexpireat"
	CmdPfadd                      = "Pfadd"
	CmdPfcount                    = "Pfcount"
	CmdPfmerge                    = "Pfmerge"
	CmdPing                       = "Ping"
	CmdPsubscribe                 = "Psubscribe"
	CmdPsync                      = "Psync"
	CmdPublish                    = "Publish"
	CmdPubsubChannels             = "PubsubChannels"
	CmdPubsubNumpat               = "PubsubNumpat"
	CmdPubsubNumsub               = "PubsubNumsub"
	CmdPunsubscribe               = "Punsubscribe"
	CmdQuit                       = "Quit"
	CmdRandomkey                  = "Randomkey"
	CmdReadonly                   = "Readonly"
	CmdReadwrite                  = "Readwrite"
	CmdRename                     = "Rename"
	CmdRenameNx                   = "RenameNx"
	CmdReplicaof                  = "Replicaof"
	CmdRestore                    = "Restore"
	CmdRole                       = "Role"
	CmdRpop                       = "Rpop"
	CmdRpoplpush                  = "Rpoplpush"
	CmdRpush                      = "Rpush"
	CmdRpushx                     = "Rpushx"
	CmdSadd                       = "Sadd"
	CmdSave                       = "Save"
	CmdScan                       = "Scan"
	CmdScard                      = "Scard"
	CmdScriptDebug                = "ScriptDebug"
	CmdScriptExists               = "ScriptExists"
	CmdScriptFlush                = "ScriptFlush"
	CmdScriptKill                 = "ScriptKill"
	CmdScriptLoad                 = "ScriptLoad"
	CmdSdiff                      = "Sdiff"
	CmdSdiffstore                 = "Sdiffstore"
	CmdSelect                     = "Select"
	CmdSet                        = "Set"
	CmdSetEx                      = "SetEx"
	CmdSetExNx                    = "SetExNx"
	CmdSetExXx                    = "SetExXx"
	CmdSetNx                      = "SetNx"
	CmdSetPx                      = "SetPx"
	CmdSetPxNx                    = "SetPxNx"
	CmdSetPxXx                    = "SetPxXx"
	CmdSetXx                      = "SetXx"
	CmdSetbit                     = "Setbit"
	CmdSetrange                   = "Setrange"
	CmdShutdown                   = "Shutdown"
	CmdSinter                     = "Sinter"
	CmdSinterstore                = "Sinterstore"
	CmdSismember                  = "Sismember"
	CmdSlowlogGet                 = "SlowlogGet"
	CmdSlowlogLen                 = "SlowlogLen"
	CmdSlowlogReset               = "SlowlogReset"
	CmdSmembers                   = "Smembers"
	CmdSmove                      = "Smove"
	CmdSort                       = "Sort"
	CmdSpop                       = "Spop"
	CmdSrandmember                = "Srandmember"
	CmdSrem                       = "Srem"
	CmdSscan                      = "Sscan"
	CmdStralgoLcsIdxKeys          = "StralgoLcsIdxKeys"
	CmdStralgoLcsIdxStrings       = "StralgoLcsIdxStrings"
	CmdStralgoLcsKeys             = "StralgoLcsKeys"
	CmdStralgoLcsLenKeys          = "StralgoLcsLenKeys"
	CmdStralgoLcsLenStrings       = "StralgoLcsLenStrings"
	CmdStralgoLcsStrings          = "StralgoLcsStrings"
	CmdStrlen                     = "Strlen"
	CmdSubscribe                  = "Subscribe"
	CmdSunion                     = "Sunion"
	CmdSunionstore                = "Sunionstore"
	CmdSwapdb                     = "Swapdb"
	CmdTTL                        = "TTL"
	CmdTime                       = "Time"
	CmdTouch                      = "Touch"
	CmdType                       = "Type"
	CmdUnlink                     = "Unlink"
	CmdUnsubscribe                = "Unsubscribe"
	CmdUnwatch                    = "Unwatch"
	CmdWait                       = "Wait"
	CmdWatch                      = "Watch"
	CmdXack                       = "Xack"
	CmdXadd                       = "Xadd"
	CmdXclaim                     = "Xclaim"
	CmdXdel                       = "Xdel"
	CmdXgroupCreate               = "XgroupCreate"
	CmdXgroupDelconsumer          = "XgroupDelconsumer"
	CmdXgroupDestroy              = "XgroupDestroy"
	CmdXgroupHelp                 = "XgroupHelp"
	CmdXgroupSetid                = "XgroupSetid"
	CmdXinfoConsumers             = "XinfoConsumers"
	CmdXinfoGroups                = "XinfoGroups"
	CmdXinfoHelp                  = "XinfoHelp"
	CmdXinfoStream                = "XinfoStream"
	CmdXlen                       = "Xlen"
	CmdXpending                   = "Xpending"
	CmdXrange                     = "Xrange"
	CmdXread                      = "Xread"
	CmdXreadgroup                 = "Xreadgroup"
	CmdXrevrange                  = "Xrevrange"
	CmdXtrim                      = "Xtrim"
	CmdZadd                       = "Zadd"
	CmdZaddCh                     = "ZaddCh"
	CmdZaddNx                     = "ZaddNx"
	CmdZaddXx                     = "ZaddXx"
	CmdZaddXxCh                   = "ZaddXxCh"
	CmdZcard                      = "Zcard"
	CmdZcount                     = "Zcount"
	CmdZincrby                    = "Zincrby"
	CmdZinterstore                = "Zinterstore"
	CmdZlexcount                  = "Zlexcount"
	CmdZpopmax                    = "Zpopmax"
	CmdZpopmin                    = "Zpopmin"
	CmdZrange                     = "Zrange"
	CmdZrangebylex                = "Zrangebylex"
	CmdZrangebyscore              = "Zrangebyscore"
	CmdZrank                      = "Zrank"
	CmdZrem                       = "Zrem"
	CmdZremrangebylex             = "Zremrangebylex"
	CmdZremrangebyrank            = "Zremrangebyrank"
	CmdZremrangebyscore           = "Zremrangebyscore"
	CmdZrevrange                  = "Zrevrange"
	CmdZrevrangebylex             = "Zrevrangebylex"
	CmdZrevrangebyscore           = "Zrevrangebyscore"
	CmdZrevrank                   = "Zrevrank"
	CmdZscan                      = "Zscan"
	CmdZscore                     = "Zscore"
	CmdZunionstore                = "Zunionstore"
)
const (
	CmdAclCatVersion                     = "6.0.0"
	CmdAclDeluserVersion                 = "6.0.0"
	CmdAclGenpassVersion                 = "6.0.0"
	CmdAclGetuserVersion                 = "6.0.0"
	CmdAclHelpVersion                    = "6.0.0"
	CmdAclListVersion                    = "6.0.0"
	CmdAclLoadVersion                    = "6.0.0"
	CmdAclLogCountVersion                = "6.0.0"
	CmdAclLogResetVersion                = "6.0.0"
	CmdAclSaveVersion                    = "6.0.0"
	CmdAclSetuserVersion                 = "6.0.0"
	CmdAclUsersVersion                   = "6.0.0"
	CmdAclWhoamiVersion                  = "6.0.0"
	CmdAppendVersion                     = "2.0.0"
	CmdAuthVersion                       = "1.0.0"
	CmdBgrewriteaofVersion               = "1.0.0"
	CmdBgsaveVersion                     = "1.0.0"
	CmdBitcountVersion                   = "2.6.0"
	CmdBitfieldVersion                   = "3.2.0"
	CmdBitopAndVersion                   = "2.6.0"
	CmdBitopNotVersion                   = "2.6.0"
	CmdBitopOrVersion                    = "2.6.0"
	CmdBitopXorVersion                   = "2.6.0"
	CmdBitposVersion                     = "2.8.7"
	CmdBlpopVersion                      = "2.0.0"
	CmdBrpopVersion                      = "2.0.0"
	CmdBrpoplpushVersion                 = "2.2.0"
	CmdBzpopmaxVersion                   = "5.0.0"
	CmdBzpopminVersion                   = "5.0.0"
	CmdClientCachingVersion              = "6.0.0"
	CmdClientGetnameVersion              = "2.6.9"
	CmdClientGetredirVersion             = "6.0.0"
	CmdClientIdVersion                   = "5.0.0"
	CmdClientKillVersion                 = "2.4.0"
	CmdClientListVersion                 = "2.4.0"
	CmdClientPauseVersion                = "2.9.50"
	CmdClientReplyVersion                = "3.2.0"
	CmdClientSetnameVersion              = "2.6.9"
	CmdClientTrackingVersion             = "6.0.0"
	CmdClientUnblockVersion              = "5.0.0"
	CmdClusterAddslotsVersion            = "3.0.0"
	CmdClusterBumpepochVersion           = "3.0.0"
	CmdClusterCountFailureReportsVersion = "3.0.0"
	CmdClusterCountkeysinslotVersion     = "3.0.0"
	CmdClusterDelslotsVersion            = "3.0.0"
	CmdClusterFailoverVersion            = "3.0.0"
	CmdClusterFlushslotsVersion          = "3.0.0"
	CmdClusterForgetVersion              = "3.0.0"
	CmdClusterGetkeysinslotVersion       = "3.0.0"
	CmdClusterInfoVersion                = "3.0.0"
	CmdClusterKeyslotVersion             = "3.0.0"
	CmdClusterMeetVersion                = "3.0.0"
	CmdClusterMyidVersion                = "3.0.0"
	CmdClusterNodesVersion               = "3.0.0"
	CmdClusterReplicasVersion            = "5.0.0"
	CmdClusterReplicateVersion           = "3.0.0"
	CmdClusterResetVersion               = "3.0.0"
	CmdClusterSaveconfigVersion          = "3.0.0"
	CmdClusterSetConfigEpochVersion      = "3.0.0"
	CmdClusterSetslotImportingVersion    = "3.0.0"
	CmdClusterSetslotMigratingVersion    = "3.0.0"
	CmdClusterSetslotNodeVersion         = "3.0.0"
	CmdClusterSetslotStableVersion       = "3.0.0"
	CmdClusterSlotsVersion               = "3.0.0"
	CmdCommandVersion                    = "2.8.13"
	CmdCommandCountVersion               = "2.8.13"
	CmdCommandGetkeysVersion             = "2.8.13"
	CmdCommandInfoVersion                = "2.8.13"
	CmdConfigGetVersion                  = "2.0.0"
	CmdConfigResetstatVersion            = "2.0.0"
	CmdConfigRewriteVersion              = "2.8.0"
	CmdConfigSetVersion                  = "2.0.0"
	CmdDbsizeVersion                     = "1.0.0"
	CmdDebugObjectVersion                = "1.0.0"
	CmdDebugSegfaultVersion              = "1.0.0"
	CmdDecrVersion                       = "1.0.0"
	CmdDecrbyVersion                     = "1.0.0"
	CmdDelVersion                        = "1.0.0"
	CmdDiscardVersion                    = "2.0.0"
	CmdDoVersion                         = "-"
	CmdDumpVersion                       = "2.6.0"
	CmdEchoVersion                       = "1.0.0"
	CmdEvalVersion                       = "2.6.0"
	CmdEvalshaVersion                    = "2.6.0"
	CmdExecVersion                       = "1.2.0"
	CmdExistsVersion                     = "1.0.0"
	CmdExpireVersion                     = "1.0.0"
	CmdExpireatVersion                   = "1.2.0"
	CmdFlushallVersion                   = "1.0.0"
	CmdFlushdbVersion                    = "1.0.0"
	CmdGeoaddVersion                     = "3.2.0"
	CmdGeodistVersion                    = "3.2.0"
	CmdGeohashVersion                    = "3.2.0"
	CmdGeoposVersion                     = "3.2.0"
	CmdGeoradiusVersion                  = "3.2.0"
	CmdGeoradiusbymemberVersion          = "3.2.0"
	CmdGetVersion                        = "1.0.0"
	CmdGetbitVersion                     = "2.2.0"
	CmdGetrangeVersion                   = "2.4.0"
	CmdGetsetVersion                     = "1.0.0"
	CmdHdelVersion                       = "2.0.0"
	CmdHelloVersion                      = "6.0.0"
	CmdHexistsVersion                    = "2.0.0"
	CmdHgetVersion                       = "2.0.0"
	CmdHgetallVersion                    = "2.0.0"
	CmdHincrbyVersion                    = "2.0.0"
	CmdHincrbyfloatVersion               = "2.6.0"
	CmdHkeysVersion                      = "2.0.0"
	CmdHlenVersion                       = "2.0.0"
	CmdHmgetVersion                      = "2.0.0"
	CmdHscanVersion                      = "2.8.0"
	CmdHsetVersion                       = "2.0.0"
	CmdHsetNxVersion                     = "2.0.0"
	CmdHstrlenVersion                    = "3.2.0"
	CmdHvalsVersion                      = "2.0.0"
	CmdIncrVersion                       = "1.0.0"
	CmdIncrbyVersion                     = "1.0.0"
	CmdIncrbyfloatVersion                = "2.6.0"
	CmdInfoVersion                       = "1.0.0"
	CmdKeysVersion                       = "1.0.0"
	CmdLastsaveVersion                   = "1.0.0"
	CmdLatencyDoctorVersion              = "2.8.13"
	CmdLatencyGraphVersion               = "2.8.13"
	CmdLatencyHelpVersion                = "2.8.13"
	CmdLatencyHistoryVersion             = "2.8.13"
	CmdLatencyLatestVersion              = "2.8.13"
	CmdLatencyResetVersion               = "2.8.13"
	CmdLindexVersion                     = "1.0.0"
	CmdLinsertVersion                    = "2.2.0"
	CmdLlenVersion                       = "1.0.0"
	CmdLolwutVersion                     = "5.0.0"
	CmdLpopVersion                       = "1.0.0"
	CmdLposVersion                       = "6.0.6"
	CmdLpushVersion                      = "1.0.0"
	CmdLpushxVersion                     = "2.2.0"
	CmdLrangeVersion                     = "1.0.0"
	CmdLremVersion                       = "1.0.0"
	CmdLsetVersion                       = "1.0.0"
	CmdLtrimVersion                      = "1.0.0"
	CmdMemoryDoctorVersion               = "4.0.0"
	CmdMemoryHelpVersion                 = "4.0.0"
	CmdMemoryMallocStatsVersion          = "4.0.0"
	CmdMemoryPurgeVersion                = "4.0.0"
	CmdMemoryStatsVersion                = "4.0.0"
	CmdMemoryUsageVersion                = "4.0.0"
	CmdMgetVersion                       = "1.0.0"
	CmdMigrateVersion                    = "2.6.0"
	CmdModuleListVersion                 = "4.0.0"
	CmdModuleLoadVersion                 = "4.0.0"
	CmdModuleUnloadVersion               = "4.0.0"
	CmdMonitorVersion                    = "1.0.0"
	CmdMoveVersion                       = "1.0.0"
	CmdMsetVersion                       = "1.0.1"
	CmdMsetNxVersion                     = "1.0.1"
	CmdMultiVersion                      = "1.2.0"
	CmdObjectEncodingVersion             = "2.2.3"
	CmdObjectFreqVersion                 = "2.2.3"
	CmdObjectHelpVersion                 = "2.2.3"
	CmdObjectIdletimeVersion             = "2.2.3"
	CmdObjectRefcountVersion             = "2.2.3"
	CmdPTTLVersion                       = "2.6.0"
	CmdPersistVersion                    = "2.2.0"
	CmdPexpireVersion                    = "2.6.0"
	CmdPexpireatVersion                  = "2.6.0"
	CmdPfaddVersion                      = "2.8.9"
	CmdPfcountVersion                    = "2.8.9"
	CmdPfmergeVersion                    = "2.8.9"
	CmdPingVersion                       = "1.0.0"
	CmdPsubscribeVersion                 = "2.0.0"
	CmdPsyncVersion                      = "2.8.0"
	CmdPublishVersion                    = "2.0.0"
	CmdPubsubChannelsVersion             = "2.8.0"
	CmdPubsubNumpatVersion               = "2.8.0"
	CmdPubsubNumsubVersion               = "2.8.0"
	CmdPunsubscribeVersion               = "2.0.0"
	CmdQuitVersion                       = "1.0.0"
	CmdRandomkeyVersion                  = "1.0.0"
	CmdReadonlyVersion                   = "3.0.0"
	CmdReadwriteVersion                  = "3.0.0"
	CmdRenameVersion                     = "1.0.0"
	CmdRenameNxVersion                   = "1.0.0"
	CmdReplicaofVersion                  = "5.0.0"
	CmdRestoreVersion                    = "2.6.0"
	CmdRoleVersion                       = "2.8.12"
	CmdRpopVersion                       = "1.0.0"
	CmdRpoplpushVersion                  = "1.2.0"
	CmdRpushVersion                      = "1.0.0"
	CmdRpushxVersion                     = "2.2.0"
	CmdSaddVersion                       = "1.0.0"
	CmdSaveVersion                       = "1.0.0"
	CmdScanVersion                       = "2.8.0"
	CmdScardVersion                      = "1.0.0"
	CmdScriptDebugVersion                = "3.2.0"
	CmdScriptExistsVersion               = "2.6.0"
	CmdScriptFlushVersion                = "2.6.0"
	CmdScriptKillVersion                 = "2.6.0"
	CmdScriptLoadVersion                 = "2.6.0"
	CmdSdiffVersion                      = "1.0.0"
	CmdSdiffstoreVersion                 = "1.0.0"
	CmdSelectVersion                     = "1.0.0"
	CmdSetVersion                        = "1.0.0"
	CmdSetExVersion                      = "1.0.0"
	CmdSetExNxVersion                    = "1.0.0"
	CmdSetExXxVersion                    = "1.0.0"
	CmdSetNxVersion                      = "1.0.0"
	CmdSetPxVersion                      = "1.0.0"
	CmdSetPxNxVersion                    = "1.0.0"
	CmdSetPxXxVersion                    = "1.0.0"
	CmdSetXxVersion                      = "1.0.0"
	CmdSetbitVersion                     = "2.2.0"
	CmdSetrangeVersion                   = "2.2.0"
	CmdShutdownVersion                   = "1.0.0"
	CmdSinterVersion                     = "1.0.0"
	CmdSinterstoreVersion                = "1.0.0"
	CmdSismemberVersion                  = "1.0.0"
	CmdSlowlogGetVersion                 = "2.2.12"
	CmdSlowlogLenVersion                 = "2.2.12"
	CmdSlowlogResetVersion               = "2.2.12"
	CmdSmembersVersion                   = "1.0.0"
	CmdSmoveVersion                      = "1.0.0"
	CmdSortVersion                       = "1.0.0"
	CmdSpopVersion                       = "1.0.0"
	CmdSrandmemberVersion                = "1.0.0"
	CmdSremVersion                       = "1.0.0"
	CmdSscanVersion                      = "2.8.0"
	CmdStralgoLcsIdxKeysVersion          = "6.0.0"
	CmdStralgoLcsIdxStringsVersion       = "6.0.0"
	CmdStralgoLcsKeysVersion             = "6.0.0"
	CmdStralgoLcsLenKeysVersion          = "6.0.0"
	CmdStralgoLcsLenStringsVersion       = "6.0.0"
	CmdStralgoLcsStringsVersion          = "6.0.0"
	CmdStrlenVersion                     = "2.2.0"
	CmdSubscribeVersion                  = "2.0.0"
	CmdSunionVersion                     = "1.0.0"
	CmdSunionstoreVersion                = "1.0.0"
	CmdSwapdbVersion                     = "4.0.0"
	CmdTTLVersion                        = "1.0.0"
	CmdTimeVersion                       = "2.6.0"
	CmdTouchVersion                      = "3.2.1"
	CmdTypeVersion                       = "1.0.0"
	CmdUnlinkVersion                     = "4.0.0"
	CmdUnsubscribeVersion                = "2.0.0"
	CmdUnwatchVersion                    = "2.2.0"
	CmdWaitVersion                       = "3.0.0"
	CmdWatchVersion                      = "2.2.0"
	CmdXackVersion                       = "5.0.0"
	CmdXaddVersion                       = "5.0.0"
	CmdXclaimVersion                     = "5.0.0"
	CmdXdelVersion                       = "5.0.0"
	CmdXgroupCreateVersion               = "5.0.0"
	CmdXgroupDelconsumerVersion          = "5.0.0"
	CmdXgroupDestroyVersion              = "5.0.0"
	CmdXgroupHelpVersion                 = "5.0.0"
	CmdXgroupSetidVersion                = "5.0.0"
	CmdXinfoConsumersVersion             = "5.0.0"
	CmdXinfoGroupsVersion                = "5.0.0"
	CmdXinfoHelpVersion                  = "5.0.0"
	CmdXinfoStreamVersion                = "5.0.0"
	CmdXlenVersion                       = "5.0.0"
	CmdXpendingVersion                   = "5.0.0"
	CmdXrangeVersion                     = "5.0.0"
	CmdXreadVersion                      = "5.0.0"
	CmdXreadgroupVersion                 = "5.0.0"
	CmdXrevrangeVersion                  = "5.0.0"
	CmdXtrimVersion                      = "5.0.0"
	CmdZaddVersion                       = "1.2.0"
	CmdZaddChVersion                     = "1.2.0"
	CmdZaddNxVersion                     = "1.2.0"
	CmdZaddXxVersion                     = "1.2.0"
	CmdZaddXxChVersion                   = "1.2.0"
	CmdZcardVersion                      = "1.2.0"
	CmdZcountVersion                     = "2.0.0"
	CmdZincrbyVersion                    = "1.2.0"
	CmdZinterstoreVersion                = "2.0.0"
	CmdZlexcountVersion                  = "2.8.9"
	CmdZpopmaxVersion                    = "5.0.0"
	CmdZpopminVersion                    = "5.0.0"
	CmdZrangeVersion                     = "1.2.0"
	CmdZrangebylexVersion                = "2.8.9"
	CmdZrangebyscoreVersion              = "1.0.5"
	CmdZrankVersion                      = "2.0.0"
	CmdZremVersion                       = "1.2.0"
	CmdZremrangebylexVersion             = "2.8.9"
	CmdZremrangebyrankVersion            = "2.0.0"
	CmdZremrangebyscoreVersion           = "1.2.0"
	CmdZrevrangeVersion                  = "1.2.0"
	CmdZrevrangebylexVersion             = "2.8.9"
	CmdZrevrangebyscoreVersion           = "2.2.0"
	CmdZrevrankVersion                   = "2.0.0"
	CmdZscanVersion                      = "2.8.0"
	CmdZscoreVersion                     = "1.2.0"
	CmdZunionstoreVersion                = "2.0.0"
)

var CommandNames = []string{CmdAclCat, CmdAclDeluser, CmdAclGenpass, CmdAclGetuser, CmdAclHelp, CmdAclList, CmdAclLoad, CmdAclLogCount, CmdAclLogReset, CmdAclSave, CmdAclSetuser, CmdAclUsers, CmdAclWhoami, CmdAppend, CmdAuth, CmdBgrewriteaof, CmdBgsave, CmdBitcount, CmdBitfield, CmdBitopAnd, CmdBitopNot, CmdBitopOr, CmdBitopXor, CmdBitpos, CmdBlpop, CmdBrpop, CmdBrpoplpush, CmdBzpopmax, CmdBzpopmin, CmdClientCaching, CmdClientGetname, CmdClientGetredir, CmdClientId, CmdClientKill, CmdClientList, CmdClientPause, CmdClientReply, CmdClientSetname, CmdClientTracking, CmdClientUnblock, CmdClusterAddslots, CmdClusterBumpepoch, CmdClusterCountFailureReports, CmdClusterCountkeysinslot, CmdClusterDelslots, CmdClusterFailover, CmdClusterFlushslots, CmdClusterForget, CmdClusterGetkeysinslot, CmdClusterInfo, CmdClusterKeyslot, CmdClusterMeet, CmdClusterMyid, CmdClusterNodes, CmdClusterReplicas, CmdClusterReplicate, CmdClusterReset, CmdClusterSaveconfig, CmdClusterSetConfigEpoch, CmdClusterSetslotImporting, CmdClusterSetslotMigrating, CmdClusterSetslotNode, CmdClusterSetslotStable, CmdClusterSlots, CmdCommand, CmdCommandCount, CmdCommandGetkeys, CmdCommandInfo, CmdConfigGet, CmdConfigResetstat, CmdConfigRewrite, CmdConfigSet, CmdDbsize, CmdDebugObject, CmdDebugSegfault, CmdDecr, CmdDecrby, CmdDel, CmdDiscard, CmdDo, CmdDump, CmdEcho, CmdEval, CmdEvalsha, CmdExec, CmdExists, CmdExpire, CmdExpireat, CmdFlushall, CmdFlushdb, CmdGeoadd, CmdGeodist, CmdGeohash, CmdGeopos, CmdGeoradius, CmdGeoradiusbymember, CmdGet, CmdGetbit, CmdGetrange, CmdGetset, CmdHdel, CmdHello, CmdHexists, CmdHget, CmdHgetall, CmdHincrby, CmdHincrbyfloat, CmdHkeys, CmdHlen, CmdHmget, CmdHscan, CmdHset, CmdHsetNx, CmdHstrlen, CmdHvals, CmdIncr, CmdIncrby, CmdIncrbyfloat, CmdInfo, CmdKeys, CmdLastsave, CmdLatencyDoctor, CmdLatencyGraph, CmdLatencyHelp, CmdLatencyHistory, CmdLatencyLatest, CmdLatencyReset, CmdLindex, CmdLinsert, CmdLlen, CmdLolwut, CmdLpop, CmdLpos, CmdLpush, CmdLpushx, CmdLrange, CmdLrem, CmdLset, CmdLtrim, CmdMemoryDoctor, CmdMemoryHelp, CmdMemoryMallocStats, CmdMemoryPurge, CmdMemoryStats, CmdMemoryUsage, CmdMget, CmdMigrate, CmdModuleList, CmdModuleLoad, CmdModuleUnload, CmdMonitor, CmdMove, CmdMset, CmdMsetNx, CmdMulti, CmdObjectEncoding, CmdObjectFreq, CmdObjectHelp, CmdObjectIdletime, CmdObjectRefcount, CmdPTTL, CmdPersist, CmdPexpire, CmdPexpireat, CmdPfadd, CmdPfcount, CmdPfmerge, CmdPing, CmdPsubscribe, CmdPsync, CmdPublish, CmdPubsubChannels, CmdPubsubNumpat, CmdPubsubNumsub, CmdPunsubscribe, CmdQuit, CmdRandomkey, CmdReadonly, CmdReadwrite, CmdRename, CmdRenameNx, CmdReplicaof, CmdRestore, CmdRole, CmdRpop, CmdRpoplpush, CmdRpush, CmdRpushx, CmdSadd, CmdSave, CmdScan, CmdScard, CmdScriptDebug, CmdScriptExists, CmdScriptFlush, CmdScriptKill, CmdScriptLoad, CmdSdiff, CmdSdiffstore, CmdSelect, CmdSet, CmdSetEx, CmdSetExNx, CmdSetExXx, CmdSetNx, CmdSetPx, CmdSetPxNx, CmdSetPxXx, CmdSetXx, CmdSetbit, CmdSetrange, CmdShutdown, CmdSinter, CmdSinterstore, CmdSismember, CmdSlowlogGet, CmdSlowlogLen, CmdSlowlogReset, CmdSmembers, CmdSmove, CmdSort, CmdSpop, CmdSrandmember, CmdSrem, CmdSscan, CmdStralgoLcsIdxKeys, CmdStralgoLcsIdxStrings, CmdStralgoLcsKeys, CmdStralgoLcsLenKeys, CmdStralgoLcsLenStrings, CmdStralgoLcsStrings, CmdStrlen, CmdSubscribe, CmdSunion, CmdSunionstore, CmdSwapdb, CmdTTL, CmdTime, CmdTouch, CmdType, CmdUnlink, CmdUnsubscribe, CmdUnwatch, CmdWait, CmdWatch, CmdXack, CmdXadd, CmdXclaim, CmdXdel, CmdXgroupCreate, CmdXgroupDelconsumer, CmdXgroupDestroy, CmdXgroupHelp, CmdXgroupSetid, CmdXinfoConsumers, CmdXinfoGroups, CmdXinfoHelp, CmdXinfoStream, CmdXlen, CmdXpending, CmdXrange, CmdXread, CmdXreadgroup, CmdXrevrange, CmdXtrim, CmdZadd, CmdZaddCh, CmdZaddNx, CmdZaddXx, CmdZaddXxCh, CmdZcard, CmdZcount, CmdZincrby, CmdZinterstore, CmdZlexcount, CmdZpopmax, CmdZpopmin, CmdZrange, CmdZrangebylex, CmdZrangebyscore, CmdZrank, CmdZrem, CmdZremrangebylex, CmdZremrangebyrank, CmdZremrangebyscore, CmdZrevrange, CmdZrevrangebylex, CmdZrevrangebyscore, CmdZrevrank, CmdZscan, CmdZscore, CmdZunionstore}
